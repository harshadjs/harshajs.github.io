[
    
    
    
        
            {
                "id": 0,
                "href": "/posts/luck_and_risk/",
                "title": "Luck and Risk",
                "section": "posts",
                "date" : "2024.09.19",
                "body": " (Source: Psychology of Money)\nLuck and risk - they are cousins! You cannot think of one while completely forgetting the other.\nStories / outcomes heavily relying on luck, whether successful or failed, offer very limited usable learning. Such outcomes are like samples that are at the far tail end of a long tail distribution. The multitude of factors that would have had to align in a certain way is too great to derive any meaningful insight.\nLinks to this note "
            }
    
        ,
            {
                "id": 1,
                "href": "/posts/emacs/",
                "title": "emacs",
                "section": "posts",
                "date" : "2024.08.29",
                "body": " Links to this note emacs config: This note contains my entire emacs configuration. For those who are curious, this is an Digital Garden Graph Generator: emacs org-mode\u0026#39;s babel module enables literate programming. It supports noweb syntax as termux setup: This note, when opened in emacs and tangled using org-babel-tangle-file, creates a bunch of "
            }
    
        ,
            {
                "id": 2,
                "href": "/posts/emacs_on_android/",
                "title": "emacs on android",
                "section": "posts",
                "date" : "2024.08.29",
                "body": " I have always wanted access to emacs, and especially Org Mode on my android phone.\nThis note describes my high level setup:\norgzly for todo / agenda termux for notes Orgzly does the job well, but doesn\u0026#39;t work well with org roam. On the other hand, termux is good for accessing notes. In termux, I have widgets like open agenda, org capture, search org-roam notes, sync with git.\nAll my termux configuration is published at termux setup.\nLinks to this note termux setup: phone. So, this note is meant to be executed inside emacs running on android. (literate programming). "
            }
    
        ,
            {
                "id": 3,
                "href": "/posts/org_roam/",
                "title": "org roam",
                "section": "posts",
                "date" : "2024.08.29",
                "body": " Links to this note Digital Garden Graph Generator: - roam_notes_dir: This is the location of org roam notes. emacs on android: Orgzly does the job well, but doesn\u0026#39;t work well with org roam. On the other hand, termux is "
            }
    
        ,
            {
                "id": 4,
                "href": "/posts/music/",
                "title": "music",
                "section": "posts",
                "date" : "2024.08.28",
                "body": " Over the years I\u0026#39;ve had the privilege of collaborating with some very talented musicians. Here are some of the collaborations and also a few individual recordings.\nCollaborations --- Dream A Little Dream Of Me Cover on Instagram Instrumentals Links to this note yaava mohana: the first time I heard it. Do listen :) (music) rehna tu: here\u0026#39;s our take on it. AR Rahman\u0026#39;s music is just amazing! Organizing Song chords: helped me to be more organized about my music. It has helped me collaborate better with dil mein jaagi: my favorite music covers! "
            }
    
        ,
            {
                "id": 5,
                "href": "/posts/org_mode/",
                "title": "org mode",
                "section": "posts",
                "date" : "2024.08.28",
                "body": " I use emacs org mode, for note taking, planning life, remembering random tidbits. This digital garden is also generated using org mode. My Emacs Configuration has a section dedicated for org mode.\nSome interesting articles Article that describes how to do org mode on android - https://babbagefiles.xyz/org-roam-on-android/\n5 Org roam hacks - https://www.youtube.com/watch?v=CUkuyW6hr18\u0026amp;t=2s Links to this note emacs config: exmaple of literate programming. This note itself is written in org mode format. literate programming: I think org mode makes the concept of literate programming a lot more tangible. Google colab emacs on android: I have always wanted access to emacs, and especially Org Mode on my android phone. "
            }
    
        ,
            {
                "id": 6,
                "href": "/posts/literate_programming/",
                "title": "literate programming",
                "section": "posts",
                "date" : "2024.08.26",
                "body": " (From wikipedia)\nLiterate programming is a programming paradigm introduced in 1984 by Donald Knuth in which a computer program is given as an explanation of how it works in a natural language, such as English, interspersed (embedded) with snippets of macros and traditional source code, from which compilable source code can be generated.\nI think org mode makes the concept of literate programming a lot more tangible. Google colab or Jupyter notebooks is another simple way in which literte programming is made available.\nLinks to this note emacs config: exmaple of literate programming. This note itself is written in org mode format. Digital Garden Graph Generator: emacs org-mode\u0026#39;s babel module enables literate programming. It supports noweb syntax as tmux Configuration: This note contains configuration (literate programming) that I use for tmux. termux setup: phone. So, this note is meant to be executed inside emacs running on android. (literate programming). "
            }
    
        ,
            {
                "id": 7,
                "href": "/posts/tmux-config/",
                "title": "tmux Configuration",
                "section": "posts",
                "date" : "2024.08.22",
                "body": " This note contains configuration (literate programming) that I use for tmux.\n# panes set -g pane-border-style fg=black set -g pane-active-border-style fg=brightred ## Status bar design # status line set -g status-justify left set -g status-style bg=default,fg=colour12 set -g status-interval 2 # messaging set -g message-style bg=yellow,fg=black set -g message-command-style fg=blue,bg=black,bold #window mode setw -g mode-style bg=colour6,fg=colour0 # setw -g mode-fg colour196 # setw -g mode-bg colour238 # window status setw -g window-status-format \u0026#34; #F#I:#W#F \u0026#34; setw -g window-status-current-format \u0026#34; #F#I:#W#F \u0026#34; setw -g window-status-format \u0026#34;#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W \u0026#34; setw -g window-status-current-format \u0026#34;#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W \u0026#34; setw -g window-status-current-style bg=colour0,fg=colour11,dim setw -g window-status-style bg=green,fg=black,reverse # Info on left (I don\u0026#39;t have a session display for now) set -g status-left \u0026#39;\u0026#39; # loud or quiet? set-option -g visual-activity off set-option -g visual-bell off set-option -g visual-silence off set-window-option -g monitor-activity off set-option -g bell-action none set -g default-terminal \u0026#34;screen-256color\u0026#34; # The modes { setw -g clock-mode-colour colour135 set -g mouse on # } # The panes { set -g pane-border-style bg=colour235,fg=colour238 set -g pane-active-border-style bg=colour236,fg=colour51 # } # The statusbar { set -g status-position bottom set -g status-style bg=colour234,fg=colour137,dim set -g status-left \u0026#39;\u0026#39; set -g status-right \u0026#39;#[fg=colour250,bold]@#S #[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M\u0026#39; set -g status-right-length 50 set -g status-left-length 20 setw -g window-status-current-style fg=colour81,bg=colour238,bold setw -g window-status-current-format \u0026#39; #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50] \u0026#39; setw -g window-status-style fg=colour138,bg=colour235,none setw -g window-status-format \u0026#39; #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244] \u0026#39; setw -g window-status-bell-style fg=colour255,bg=colour1,bold # } # The messages { set -g message-style fg=colour232,bg=colour166,bold # } ## ## Keybindings ## unbind C-b set -g prefix C-q bind q send-prefix bind \\ split-window -h bind - split-window -v bind ` select-window -t 0 bind-key -n M-] next-window bind-key -n M-[ previous-window bind -n M-1 select-window -t 1 bind -n M-2 select-window -t 2 bind -n M-3 select-window -t 3 bind -n M-4 select-window -t 4 bind -n M-5 select-window -t 5 bind -n M-6 select-window -t 6 bind -n M-7 select-window -t 7 bind -n M-8 select-window -t 8 bind -n M-9 select-window -t 9 bind -n M-0 select-window -t 0 bind -n M-i select-pane -U bind -n M-k select-pane -D bind -n M-j select-pane -L bind -n M-l select-pane -R bind T swap-window -t 0 ## ## Other configuration ## set -g history-limit 100000 setw -g mode-keys emacs setw -g monitor-activity off set -g visual-activity off Links to this note "
            }
    
        ,
            {
                "id": 8,
                "href": "/posts/termux-setup/",
                "title": "termux setup",
                "section": "posts",
                "date" : "2024.08.20",
                "body": " This note, when opened in emacs and tangled using org-babel-tangle-file, creates a bunch of files (see :tangle field in source code blocks below). The files that are created here are termux \u0026#34;shortcuts\u0026#34;. These eventually convert into executable widgets on an android phone. So, this note is meant to be executed inside emacs running on android. (literate programming).\nCreate ~/.shortcuts directory rm -rf ~/.shortcuts mkdir -p ~/.shortcuts Open Agenda View emacsclient -c -e \u0026#34;(org-agenda nil \\\u0026#34;a\\\u0026#34;)\u0026#34; Capture emacsclient -c -e \u0026#34;(org-capture)\u0026#34; Launch Emacs emacs Start Emacs Server emacs --daemon while [ true ]; do echo \u0026#34;Emacs server is running here.\u0026#34; echo \u0026#34;Don\u0026#39;t exit this window\u0026#34;. echo \u0026#34;Type qqq if you really want to exit\u0026#34; read input if [ \u0026#34;$input\u0026#34; = \u0026#34;qqq\u0026#34; ]; then break fi done Kill Emacs Server pkill emacs Open Inbox emacsclient ~/h/org/personal/inbox.org One Weekly Note emacsclient ~/h/org/weekly.org Roam Search emacsclient -c -e \u0026#34;(org-roam-node-find)\u0026#34; Sync cd ~/h git add . git commit -m \u0026#34;termux commit on $(date)\u0026#34; git pull --rebase git push cd ~/repo/digital-garden git add . git commit -m \u0026#34;termux commit on $(date)\u0026#34; git pull --rebase git push Links to this note emacs on android: Orgzly does the job well, but doesn\u0026#39;t work well with org roam. On the other hand, termux is emacs on android: All my termux configuration is published at termux setup. "
            }
    
        ,
            {
                "id": 9,
                "href": "/posts/configuration/",
                "title": "emacs config",
                "section": "posts",
                "date" : "2022.06.21",
                "body": " This note contains my entire emacs configuration. For those who are curious, this is an exmaple of literate programming. This note itself is written in org mode format.\nOrg mode supports a feature called babel which allow org documents to contain executable code.\nOne time setup This step is only needed one time. Execute the following block once.\necho \u0026#34;(org-babel-load-file \\\u0026#34;${PWD}/configuration.org\\\u0026#34;)\u0026#34; \u0026gt; ~/.emacs mkdir -p ~/.emacs.d wget https://raw.githubusercontent.com/nobiot/md-roam/refs/heads/main/md-roam.el -P ~/.emacs.d/ Things to Look into ox-pandoc - https://github.com/kawabata/ox-pandoc https://www.masteringemacs.org/ https://sachachua.com/blog/ org-insert-todo-heading - maybe useful on mobile? Emacs Debugging Turn this on (set to t) if there\u0026#39;s a need to debug emacs.\n(setq debug-on-error nil) User Information (setq user-full-name \u0026#34;Harshad Shirwadkar\u0026#34;) (setq user-mail-address \u0026#34;harshadshirwadkar@gmail.com\u0026#34;) Define Platform (setq hs/platform \u0026#39;nil) (cond ((file-exists-p \u0026#34;~/.emacs-on-android\u0026#34;) (setq hs/platform \u0026#39;hs/platform/android)) ((file-exists-p \u0026#34;~/.emacs-on-work-linux\u0026#34;) (setq hs/platform \u0026#39;hs/platform/linux/work)) ((eq system-type \u0026#39;darwin) (setq hs/platform \u0026#39;hs/platform/macos)) (t (setq hs/platform \u0026#39;hs/platform/linux))) Emacs custom load file I don\u0026#39;t like it when ~/.emacs gets cluttered with custom stuff. Let\u0026#39;s put that in a dedicated file.\n(setq custom-file \u0026#34;~/.emacs.d/custom.el\u0026#34;) (load-file custom-file) Automatically install use-package First things first. Let\u0026#39;s install use-package, which serves as our main package installing tool.\nuse-package (require \u0026#39;package) (package-initialize) (setq package-archives \u0026#39;( (\u0026#34;org\u0026#34; . \u0026#34;https://orgmode.org/elpa/\u0026#34;) (\u0026#34;gnu\u0026#34; . \u0026#34;https://elpa.gnu.org/packages/\u0026#34;) (\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;) (\u0026#34;gnu-devel\u0026#34; . \u0026#34;https://elpa.gnu.org/devel/\u0026#34;) )) (setq package-check-signature \u0026#39;nil) (unless (package-installed-p \u0026#39;use-package) (unless package-archive-contents (package-refresh-contents)) (package-install \u0026#39;use-package)) quelpa (use-package quelpa :ensure t) Language Specific Settings C Indentation (defun hs/c-indent/config-indent-80andNoTrail() (setq whitespace-line-column 80) ;; limit line length (setq whitespace-style \u0026#39;(face lines-tail)) (add-hook \u0026#39;prog-mode-hook \u0026#39;whitespace-mode) (setq show-trailing-whitespace t) ) (defun hs/c-indent/config-indent-linux() (setq c-default-style \u0026#34;linux\u0026#34;) ;; Use TABs of length of 8 (setq indent-tabs-mode 1 tab-width 8 c-basic-offset 8) ) (add-hook \u0026#39;c-mode-hook \u0026#39;hs/c-indent/config-indent-linux) (add-hook \u0026#39;c-mode-common-hook \u0026#39;hs/c-indent/config-indent-80andNoTrail) ;; For CamelCase Editing (add-hook \u0026#39;c-mode-common-hook (lambda () (subword-mode 1))) Cscope (use-package xcscope :ensure t) (cscope-setup) (global-set-key (kbd \u0026#34;\\C-c s s\u0026#34;) \u0026#39;cscope-find-this-symbol) (global-set-key (kbd \u0026#34;\\C-c s d\u0026#34;) \u0026#39;cscope-find-global-definition) (global-set-key (kbd \u0026#34;\\C-c s g\u0026#34;) \u0026#39;cscope-find-global-definition) (global-set-key (kbd \u0026#34;\\C-c s G\u0026#34;) \u0026#39;cscope-find-global-definition-no-prompting) (global-set-key (kbd \u0026#34;\\C-c s c\u0026#34;) \u0026#39;cscope-find-functions-calling-this-function) (global-set-key (kbd \u0026#34;\\C-c s C\u0026#34;) \u0026#39;cscope-find-called-functions) (global-set-key (kbd \u0026#34;\\C-c s t\u0026#34;) \u0026#39;cscope-find-this-text-string) (global-set-key (kbd \u0026#34;\\C-c s e\u0026#34;) \u0026#39;cscope-find-egrep-pattern) (global-set-key (kbd \u0026#34;\\C-c s f\u0026#34;) \u0026#39;cscope-find-this-file) (global-set-key (kbd \u0026#34;\\C-c s i\u0026#34;) \u0026#39;cscope-find-files-including-file) (global-set-key (kbd \u0026#34;\\C-c s b\u0026#34;) \u0026#39;cscope-display-buffer) (global-set-key (kbd \u0026#34;\\C-c s B\u0026#34;) \u0026#39;cscope-display-buffer-toggle) (global-set-key (kbd \u0026#34;\\C-c s n\u0026#34;) \u0026#39;cscope-next-symbol) (global-set-key (kbd \u0026#34;\\C-c s N\u0026#34;) \u0026#39;cscope-next-file) (global-set-key (kbd \u0026#34;\\C-c s p\u0026#34;) \u0026#39;cscope-prev-symbol) (global-set-key (kbd \u0026#34;\\C-c s P\u0026#34;) \u0026#39;cscope-prev-file) (global-set-key (kbd \u0026#34;\\C-c s u\u0026#34;) \u0026#39;cscope-pop-mark) (global-set-key (kbd \u0026#34;\\C-c s a\u0026#34;) \u0026#39;cscope-set-initial-directory) (global-set-key (kbd \u0026#34;\\C-c s A\u0026#34;) \u0026#39;cscope-unset-initial-directory) (global-set-key (kbd \u0026#34;\\C-c s L\u0026#34;) \u0026#39;cscope-create-list-of-files-to-index) (global-set-key (kbd \u0026#34;\\C-c s I\u0026#34;) \u0026#39;cscope-index-files) (global-set-key (kbd \u0026#34;\\C-c s E\u0026#34;) \u0026#39;cscope-edit-list-of-files-to-index) (global-set-key (kbd \u0026#34;\\C-c s W\u0026#34;) \u0026#39;cscope-tell-user-about-directory) (global-set-key (kbd \u0026#34;\\C-c s S\u0026#34;) \u0026#39;cscope-tell-user-about-directory) (global-set-key (kbd \u0026#34;\\C-c s T\u0026#34;) \u0026#39;cscope-tell-user-about-directory) (global-set-key (kbd \u0026#34;\\C-c s D\u0026#34;) \u0026#39;cscope-dired-directory) UI (if (fboundp \u0026#39;menu-bar-mode) (menu-bar-mode -1)) (if (fboundp \u0026#39;tool-bar-mode) (tool-bar-mode -1)) (if (fboundp \u0026#39;scroll-bar-mode) (scroll-bar-mode -1)) (when window-system (setq frame-title-format \u0026#39;(buffer-file-name \u0026#34;%f\u0026#34; (\u0026#34;%b\u0026#34;))) (tooltip-mode -1) (mouse-wheel-mode t) (blink-cursor-mode -1)) (set-terminal-coding-system \u0026#39;utf-8) (set-keyboard-coding-system \u0026#39;utf-8) (prefer-coding-system \u0026#39;utf-8) (ansi-color-for-comint-mode-on) (delete-selection-mode 1) (setq visible-bell t echo-keystrokes 0.1 font-lock-maximum-decoration t inhibit-startup-message t transient-mark-mode t color-theme-is-global t shift-select-mode nil mouse-yank-at-point t require-final-newline t truncate-partial-width-windows nil uniquify-buffer-name-style \u0026#39;forward ediff-window-setup-function \u0026#39;ediff-setup-windows-plain dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)) oddmuse-directory (concat dotfiles-dir \u0026#34;oddmuse\u0026#34;) xterm-mouse-mode t save-place-file (concat dotfiles-dir \u0026#34;places\u0026#34;)) (add-to-list \u0026#39;safe-local-variable-values \u0026#39;(lexical-binding . t)) (add-to-list \u0026#39;safe-local-variable-values \u0026#39;(whitespace-line-column . 80)) (set-face-background \u0026#39;vertical-border \u0026#34;white\u0026#34;) (set-face-foreground \u0026#39;vertical-border \u0026#34;white\u0026#34;) ;; Disable status and header lines for cleaner appearance (setq-default header-line-format nil) ; (setq-default mode-line-format nil) ; (doom-modeline-mode 1) Mode line (setq-default mode-line-format (list \u0026#34;%e\u0026#34; mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification \u0026#34; \u0026#34; mode-line-position \u0026#34; \u0026#34; mode-line-misc-info mode-line-end-spaces )) Winner Mode This mode allows me to undo the window configuration.\n(when (fboundp \u0026#39;winner-mode) (winner-mode 1)) Scrolling (setq mouse-wheel-scroll-amount \u0026#39;(1 ((shift) . 1))) ;; one line at a time (setq mouse-wheel-progressive-speed t) ;; don\u0026#39;t accelerate scrolling (setq mouse-wheel-follow-mouse t) ;; scroll window under mouse~ (setq scroll-conservatively 100) Line and Column Numbers Enable Line Numbers and Column Numbers. This is enabled by three modes:\nLine number mode: shows line numbers above mini-buffer Column number mode: shows column numbers above mini-buffer Linum mode: shows line numbers on the left hand side of the buffer (line-number-mode 1) (column-number-mode 1) (autoload \u0026#39;linum-mode \u0026#34;linum\u0026#34; \u0026#34;toggle line numbers on/off\u0026#34; t) (if (display-graphic-p) (setq linum-format \u0026#34; %d\u0026#34;) (setq linum-format \u0026#34;%4d | \u0026#34;) ) Olivetti Mode This mode nicely adds gray colored fringes, making org mode look like google docs. Currently only enabled on Linux machines. On others it doesn\u0026#39;t yet make a lot of sense. Only problem with this mode is that, large tables look terrible. But that might be an acceptable compromise. Just don\u0026#39;t use this mode on notes where you have large tables.\n(when (or (eq hs/platform \u0026#39;hs/platform/linux) (eq hs/platform \u0026#39;hs/platform/linux/work)) (use-package olivetti :ensure t :custom (olivetti-body-width 97)) (setq olivetti-style \u0026#39;fancy olivetti-margin-width 8)) Themes I generally prefer loading dark themes. But there are times when light theme makes sense. So, instead of changing config everytime, just check for file existence while loading theme. Terminal is always dark though.\nFolowing logic loads theme based on presence of file ~/.emacs-light. If present, it\u0026#39;s time to use light mode, otherwise dark. At some point I should look into integrating with system\u0026#39;s light / dark status.\n(use-package doom-themes :ensure t) (use-package flucui-themes :ensure t) (set-face-attribute \u0026#39;default nil :font \u0026#34;Hack-12\u0026#34;) (defun hs/load-dark-theme () \u0026#34;Load dark theme\u0026#34; (interactive) ;; (load-theme \u0026#39;doom-plain-dark t) ;;(load-theme \u0026#39;doom-homage-black t) ;; (load-theme \u0026#39;doom-molokai t) (load-theme \u0026#39;doom-city-lights) (set-face-attribute \u0026#39;default nil :font \u0026#34;Hack-12\u0026#34;) (custom-theme-set-faces \u0026#39;user \u0026#39;(org-level-1 ((t (:foreground \u0026#34;lightgreen\u0026#34; :bold t)))) \u0026#39;(org-level-2 ((t (:foreground \u0026#34;#1abc9c\u0026#34; :bold t)))) \u0026#39;(org-level-3 ((t (:foreground \u0026#34;lightgreen\u0026#34; :bold t)))) \u0026#39;(org-scheduled-previously ((t (:foreground \u0026#34;lightgreen\u0026#34;)))) \u0026#39;(org-document-title ((t (:height 200)))) \u0026#39;(org-document-info ((t (:foreground \u0026#34;#1976D2\u0026#34;)))) \u0026#39;(org-document-info-keyword ((t (:foreground \u0026#34;lightgray\u0026#34;)))) \u0026#39;(org-drawer ((t (:foreground \u0026#34;lightgray\u0026#34;)))) \u0026#39;(org-table ((t (:foreground \u0026#34;lightgray\u0026#34;)))) \u0026#39;(org-block-begin-line ((t (:foreground \u0026#34;gray\u0026#34; :background \u0026#34;black\u0026#34;)))) \u0026#39;(org-block-end-line ((t (:foreground \u0026#34;gray\u0026#34; :background \u0026#34;black\u0026#34;)))) \u0026#39;(org-block ((t (:foreground \u0026#34;white\u0026#34; :background \u0026#34;black\u0026#34;)))) \u0026#39;(org-link ((t (:foreground \u0026#34;#3daee9\u0026#34; :bold t)))) \u0026#39;(link ((t (:foreground \u0026#34;#3daee9\u0026#34; :bold t)))) \u0026#39;(default ((t (:foreground \u0026#34;#fcfcfc\u0026#34;)))) ) (set-face-background \u0026#39;olivetti-fringe \u0026#34;gray27\u0026#34;) ) ; Theme that sets RFC style custimizations. Here is an exmaple: ; https://datatracker.ietf.org/doc/html/rfc7530#section-1.4.3.1 (defun hs/apply-light-customizations-rfc () \u0026#34;Apply light theme customizations\u0026#34; (interactive) (set-face-attribute \u0026#39;default nil :font \u0026#34;Hack-12\u0026#34; :foreground \u0026#34;black\u0026#34;) (custom-theme-set-faces \u0026#39;user \u0026#39;(org-level-1 ((t (:foreground \u0026#34;black\u0026#34; :bold t)))) \u0026#39;(org-level-2 ((t (:foreground \u0026#34;black\u0026#34; :bold t)))) \u0026#39;(org-level-3 ((t (:foreground \u0026#34;black\u0026#34; :bold t)))) \u0026#39;(org-level-4 ((t (:foreground \u0026#34;black\u0026#34; :bold t)))) \u0026#39;(org-level-5 ((t (:foreground \u0026#34;black\u0026#34; :bold t)))) \u0026#39;(org-document-title ((t (:foreground \u0026#34;black\u0026#34; :bold t :height 200)))) \u0026#39;(org-document-info ((t (:foreground \u0026#34;dark gray\u0026#34;)))) \u0026#39;(org-document-info-keyword ((t (:foreground \u0026#34;dark gray\u0026#34;)))) \u0026#39;(org-drawer ((t (:foreground \u0026#34;lightgray\u0026#34;)))) \u0026#39;(org-link ((t (:foreground \u0026#34;dodger blue\u0026#34; :bold nil)))) \u0026#39;(link ((t (:foreground \u0026#34;dodger blue\u0026#34; :bold nil)))) \u0026#39;(org-block-begin-line ((t (:foreground \u0026#34;dark gray\u0026#34; :height 75 :italic nil)))) \u0026#39;(org-block-end-line ((t (:foreground \u0026#34;dark gray\u0026#34; :height 75 :italic nil)))) \u0026#39;(org-table ((t (:foreground \u0026#34;black\u0026#34;)))) \u0026#39;(org-block ((t (:foreground \u0026#34;black\u0026#34; :background \u0026#34;lemonchiffon2\u0026#34;)))) \u0026#39;(org-meta-line ((t (:foreground \u0026#34;dodger blue\u0026#34;)))) \u0026#39;(org-tag ((t (:foreground \u0026#34;dodger blue\u0026#34; :background nil :box nil :bold t)))) ) (setq org-startup-numerated t) (set-face-background \u0026#39;olivetti-fringe \u0026#34;gray92\u0026#34;) ) (defun hs/apply-light-customizations () \u0026#34;Apply light theme customizations\u0026#34; (interactive) (set-face-attribute \u0026#39;default nil :font \u0026#34;Hack-12\u0026#34; :foreground \u0026#34;black\u0026#34;) (custom-theme-set-faces \u0026#39;user \u0026#39;(org-level-1 ((t (:foreground \u0026#34;seagreen\u0026#34; :bold t)))) \u0026#39;(org-level-2 ((t (:foreground \u0026#34;darkgreen\u0026#34;)))) \u0026#39;(org-level-3 ((t (:foreground \u0026#34;#4E7367\u0026#34;)))) \u0026#39;(org-document-title ((t (:foreground \u0026#34;forest green\u0026#34; :bold t :height 200)))) \u0026#39;(org-document-info ((t (:foreground \u0026#34;#527469\u0026#34;)))) \u0026#39;(org-document-info-keyword ((t (:foreground \u0026#34;lightblue\u0026#34;)))) \u0026#39;(org-drawer ((t (:foreground \u0026#34;lightgray\u0026#34;)))) \u0026#39;(org-link ((t (:foreground \u0026#34;#527469\u0026#34; :bold nil)))) \u0026#39;(link ((t (:foreground \u0026#34;#527469\u0026#34; :bold nil)))) \u0026#39;(org-block-begin-line ((t (:foreground \u0026#34;dark gray\u0026#34; :background \u0026#34;gray93\u0026#34;)))) \u0026#39;(org-table ((t (:foreground \u0026#34;dark olive green\u0026#34;)))) \u0026#39;(org-block ((t (:foreground \u0026#34;black\u0026#34; :background \u0026#34;gray93\u0026#34;)))) \u0026#39;(org-block-end-line ((t (:foreground \u0026#34;dark gray\u0026#34; :background \u0026#34;gray93\u0026#34;)))) \u0026#39;(org-meta-line nil :height 0.8 :slant \u0026#39;normal) ) (set-face-background \u0026#39;olivetti-fringe \u0026#34;gray92\u0026#34;) ) (defun hs/load-light-theme () \u0026#34;Load light theme\u0026#34; (interactive) (load-theme \u0026#39;doom-homage-white t) (hs/apply-light-customizations-rfc) (add-hook \u0026#39;org-mode-hook \u0026#39;olivetti-mode) ) (if (display-graphic-p) (if (file-exists-p \u0026#34;~/.emacs-light\u0026#34;) (hs/load-light-theme) (hs/load-dark-theme) )) Following code is an experimental code that tries to automatically lookup system theme using dbus. I haven\u0026#39;t been able to get it to work yet.\n; (when (and IS-LINUX ;; this is doom specific ; (featurep! :ui dbus)) ;; so is this ;; I should use a better name than `a` (defun theme--handle-dbus-event (a setting values) \u0026#34;Handler for FreeDesktop theme changes.\u0026#34; (when (string= setting \u0026#34;ColorScheme\u0026#34;) (let ((scheme (car values))) (cond ((string-match-p \u0026#34;Dark\u0026#34; scheme) (hs/load-dark-theme)) ;; my custom function that sets a dark theme ((string-match-p \u0026#34;Light\u0026#34; scheme) (hs/load-light-theme)) ;; 1000 internet points to whoever guesses what this does (t (message \u0026#34;I don\u0026#39;t know how to handle scheme: %s\u0026#34; scheme)))))) (require \u0026#39;dbus) ;; since this is all FreeDesktop stuff, this *might* work on GNOME without changes (dbus-register-signal :session \u0026#34;org.freedesktop.portal\u0026#34; \u0026#34;/org/freedesktop/portal/desktop\u0026#34; \u0026#34;org.freedesktop.impl.portal.Settings\u0026#34; \u0026#34;SettingChanged\u0026#34; #\u0026#39;theme--handle-dbus-event) (use-package org-bullets :ensure t) (add-hook \u0026#39;org-mode-hook (lambda () (org-bullets-mode 1))) Tab Bar Mode Some handy short-cuts from the manual.\nC-x t 2 new tab C-x t 0 close current tab C-x t b Visit buffer in new tab C-x t t Next command open in new tab (tab-bar-mode 1) ;; enable tab bar (setq tab-bar-show t) ;; hide bar if \u0026lt;= 1 tabs open ;(setq tab-bar-close-button-show t) ;; hide tab close / X button (setq tab-bar-new-tab-choice t);; buffer to show in new tabs (setq tab-bar-tab-hints t) ;; show tab numbers ;(setq tab-bar-format \u0026#39;(tab-bar-format-tabs tab-bar-separator)) ;; elements to include in bar (global-set-key (kbd \u0026#34;s-1\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 1))) (global-set-key (kbd \u0026#34;s-2\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 2))) (global-set-key (kbd \u0026#34;s-3\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 3))) (global-set-key (kbd \u0026#34;s-4\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 4))) (global-set-key (kbd \u0026#34;s-5\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 5))) (global-set-key (kbd \u0026#34;s-6\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 6))) (global-set-key (kbd \u0026#34;s-7\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 7))) (global-set-key (kbd \u0026#34;s-8\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 8))) (global-set-key (kbd \u0026#34;s-9\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 9))) (global-set-key (kbd \u0026#34;s-0\u0026#34;) (lambda () (interactive) (tab-bar-select-tab 10))) (global-set-key (kbd \u0026#34;C-t\u0026#34;) (lambda () (interactive) (tab-bar-new-tab))) (global-set-key (kbd \u0026#34;C-\u0026lt;tab\u0026gt;\u0026#34;) (lambda () (interactive) (tab-bar-switch-to-next-tab))) Some helpful Modes Hippie Expand Mode HippieExpand looks at the word before point and tries to expand it in various ways including expanding from a fixed list (like `‘expand-abbrev’’), expanding from matching text found in a buffer (like `‘dabbrev-expand’’) or expanding in ways defined by your own functions. Which of these it tries and in what order is controlled by a configurable list of functions.\n(delete \u0026#39;try-expand-line hippie-expand-try-functions-list) (delete \u0026#39;try-expand-list hippie-expand-try-functions-list) Ido Mode The ido.el package by KimStorm lets you interactively do things with buffers and files. As an example, while searching for a file with C-x C-f, ido can helpfully suggest the files whose paths are closest to your current string, allowing you to find your files more quickly.\n;; ido-mode is like magic pixie dust! (ido-mode t) (setq ido-enable-prefix nil ido-enable-flex-matching t ido-create-new-buffer \u0026#39;always ido-use-filename-at-point \u0026#39;guess ido-max-prospects 10) (setq ido-max-directory-size 100000) (ido-mode (quote both)) ; Use the current window when visiting files and buffers with ido (setq ido-default-file-method \u0026#39;selected-window) (setq ido-default-buffer-method \u0026#39;selected-window) Ido Vertical Mode (use-package ido-vertical-mode :ensure t :commands (ido-vertical-mode) :config (ido-vertical-define-keys \u0026#39;C-n-C-p-up-and-down)) Diff Mode ;; Default to unified diffs (setq diff-switches \u0026#34;-u\u0026#34;) (eval-after-load \u0026#39;diff-mode \u0026#39;(progn (set-face-foreground \u0026#39;diff-added \u0026#34;green4\u0026#34;) (set-face-foreground \u0026#39;diff-removed \u0026#34;red3\u0026#34;))) Tramp Mode (setq tramp-default-method \u0026#34;ssh\u0026#34;) Auto revert mode (global-auto-revert-mode t) File Extension to Modes Mapping (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;COMMIT_EDITMSG$\u0026#34; . diff-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.css$\u0026#34; . css-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.ya?ml$\u0026#34; . yaml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.rb$\u0026#34; . ruby-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;Rakefile$\u0026#34; . ruby-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.js\\\\(on\\\\)?$\u0026#34; . js2-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.xml$\u0026#34; . nxml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.\\\\(org\\\\|org_archive\\\\|txt\\\\)$\u0026#34; . org-mode)) Platform Specific Stuff (when (eq hs/platform \u0026#39;hs/platform/macos) (setq system-name (car (split-string system-name \u0026#34;\\\\.\u0026#34;)))) (when (eq hs/platform \u0026#39;hs/platform/android) (setq browse-url-browser-function \u0026#39;browse-url-xdg-open) (global-visual-line-mode t) (setq org-agenda-tags-column -20)) (when (eq hs/platform \u0026#39;hs/platform/linux/work) (org-babel-load-file \u0026#34;~/repo/org-work/google-config.org\u0026#34;)) (when (or (eq hs/platform \u0026#39;hs/platform/linux) (eq hs/platform \u0026#39;hs/platform/linux/work)) (set-fringe-style 0) (scroll-bar-mode) (menu-bar-mode) (setq org-agenda-tags-column \u0026#39;auto)) Org Mode Config Library (defun hs/org-schedule-today () \u0026#34;Schedule the current task to today.\u0026#34; (interactive) (org-agenda-schedule \u0026#39;nil (current-time))) General Config (require \u0026#39;org) (require \u0026#39;org-mouse) (require \u0026#39;org-protocol) (setq org-modules (quote ( org-id org-habit org-inlinetask ))) (setq h-root-path \u0026#34;~/h\u0026#34;) (defun h-path (path) (concat h-root-path \u0026#34;/\u0026#34; path) ) (setq org-default-notes-file \u0026#34;inbox.org\u0026#34;) (setq org-export-with-broken-links t) (setq org-use-fast-todo-selection t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-fontify-done-headline t) (setq org-hide-emphasis-markers t) (setq org-pretty-entities t) (setq org-pretty-entities-include-sub-superscripts nil) (setq org-hide-leading-stars nil) ; Set default column view headings: Task Effort Clock_Summary (setq org-columns-default-format \u0026#34;%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM\u0026#34;) ; global Effort estimate values ; global STYLE property values for completion (setq org-global-properties (quote ((\u0026#34;STYLE_ALL\u0026#34; . \u0026#34;habit\u0026#34;)))) (setq org-enforce-todo-dependencies t) (setq org-startup-indented nil) (setq org-cycle-separator-lines 1) (setq org-blank-before-new-entry (quote ((heading) (plain-list-item . auto)))) (setq org-insert-heading-respect-content nil) (setq org-special-ctrl-a/e t) (setq org-special-ctrl-k t) (setq org-yank-adjusted-subtrees t) (setq org-id-method (quote uuid)) (setq org-deadline-warning-days 30) (setq org-agenda-skip-scheduled-if-done t) ; Use the current window for C-c \u0026#39; source editing (setq org-src-window-setup \u0026#39;current-window) ; Targets complete directly with IDO (setq org-outline-path-complete-in-steps nil) ;;(setq org-completion-use-ido t) ; Use the current window for indirect buffer display (setq org-indirect-buffer-display \u0026#39;current-window) (setq org-hide-block-startup t) (setq org-startup-indented t) (global-set-key (kbd \u0026#34;s-b\u0026#34;) (lambda () (interactive) (org-emphasize ?*))) (global-set-key (kbd \u0026#34;s-i\u0026#34;) (lambda () (interactive) (org-emphasize ?/))) (global-set-key (kbd \u0026#34;s-u\u0026#34;) (lambda () (interactive) (org-emphasize ?_))) (setq org-tags-match-list-sublevels t) (setq org-agenda-persistent-filter t) (setq org-agenda-skip-additional-timestamps-same-entry t) (setq org-table-use-standard-references (quote from)) (setq org-tags-column 0) ; Overwrite the current window with the agenda (setq org-agenda-window-setup \u0026#39;current-window) (setq org-clone-delete-id t) (setq org-cycle-include-plain-lists t) (setq org-startup-folded nil) (setq org-catch-invisible-edits \u0026#39;error) Return follows links!\n(setq org-return-follows-link t) Org source code blocks configuration. Don\u0026#39;t preserve indentation while editing source code blocks, use 0 indentation for source content and fontify natively.\n(setq org-src-preserve-indentation nil) (setq org-edit-src-content-indentation 0) (setq org-src-fontify-natively t) Enable inline images by default.\n(setq org-startup-with-inline-images t) UTF 8 Configuration.\n(setq org-export-coding-system \u0026#39;utf-8) (prefer-coding-system \u0026#39;utf-8) (set-charset-priority \u0026#39;unicode) (setq default-process-coding-system \u0026#39;(utf-8-unix . utf-8-unix)) Stuck projets are projects that have todos with tag project and at least one active todo.\n;;(setq org-stuck-projects \u0026#39;(\u0026#34;+project/-DONE\u0026#34; (*) () nil)) Use speed commands to quickly invoke important functions when at start of headline.\n(setq org-use-speed-commands t) (setq org-speed-commands \u0026#39;( (\u0026#34;i\u0026#34; . org-clock-in) (\u0026#34;o\u0026#34; . org-clock-out) (\u0026#34;p\u0026#34; . hs/pomodoro) (\u0026#34;r\u0026#34; . org-refile) (\u0026#34;s\u0026#34; . org-save-all-org-buffers) (\u0026#34;t\u0026#34; . org-todo) (\u0026#34;n\u0026#34; . org-narrow-to-subtree) (\u0026#34;w\u0026#34; . widen) (\u0026#34;x\u0026#34; . hs/org-schedule-today) (\u0026#34;z\u0026#34; . org-add-note) )) Enabled download mode for dired mode. (add-hook \u0026#39;dired-mode-hook \u0026#39;org-download-enable) No need to ask for confirmation during babel evaluation.\n(setq org-confirm-babel-evaluate nil) (setq org-plantuml-exec-mode \u0026#34;plantuml\u0026#34;) (setq org-plantuml-jar-path \u0026#34;~/bin/plantuml-gplv2-1.2024.3.jar\u0026#34;) (org-babel-do-load-languages \u0026#39;org-babel-load-languages \u0026#39;((shell . t) (python . t) (plantuml . t) (gnuplot . t) (dot . t) )) Use python3 for babel evaluation.\n(setq org-babel-python-command \u0026#34;python3\u0026#34;) Org Download (use-package org-download :ensure t :after org :custom (org-download-image-dir \u0026#34;~/base/notes/data\u0026#34;) (org-image-actual-width 500) :config (require \u0026#39;org-download) ) Org crypt (require \u0026#39;org-crypt) (org-crypt-use-before-save-magic) (setq org-crypt-key \u0026#34;harshadshirwadkar@gmail.com\u0026#34;) ;; GPG key to use for encryption ;; Either the Key ID or set to nil to use symmetric encryption. (setq auto-save-default nil) Short Links Emacs Special Links (defun org-generic-shortlinks-open (url) \u0026#34;Open generic shortlinks\u0026#34; (browse-url (concat \u0026#34;http://\u0026#34; url))) (defun org-tel-open (url) \u0026#34;Open generic shortlinks\u0026#34; (browse-url (concat \u0026#34;tehttp://\u0026#34; url))) (defun org-harshad-shortlinks-open (url) \u0026#34;Open the google link\u0026#34; (browse-url (concat \u0026#34;http://go.harshad.me/\u0026#34; url))) (defun org-gdoc-click (url) \u0026#34;Perform a specific action\u0026#34; (browse-url (concat \u0026#34;http://docs.google.com/document/d/\u0026#34; url))) (defun org-emacs-click (url) \u0026#34;Perform a specific action\u0026#34; (if (string= url \u0026#34;agenda\u0026#34;) (org-agenda)) (if (string= url \u0026#34;capture\u0026#34;) (org-capture)) (if (string= url \u0026#34;roam-random\u0026#34;) (org-roam-node-random)) (if (string= url \u0026#34;toggle-sidebar\u0026#34;) (dired-sidebar-toggle-sidebar)) (if (string= url \u0026#34;run\u0026#34;) (org-babel-execute-buffer)) ) (org-add-link-type \u0026#34;l\u0026#34; \u0026#39;org-generic-shortlinks-open \u0026#39;my/link-export) (org-add-link-type \u0026#34;h\u0026#34; \u0026#39;org-harshad-shortlinks-open) (org-add-link-type \u0026#34;tel\u0026#34; \u0026#39;org-tel-open) (org-add-link-type \u0026#34;gdoc\u0026#34; \u0026#39;org-gdoc-click) (org-add-link-type \u0026#34;em\u0026#34; \u0026#39;org-emacs-click) TODO Obsidian Links This works only on MacOS.\n;; obsidan link handling for obsidian:// links (defun org-obsidian-link-open (slash-message-id) \u0026#34;Handler for org-link-set-parameters that opens a obsidian:// link in obsidian\u0026#34; ;; remove any / at the start of slash-message-id to create real note-id (let ((message-id (replace-regexp-in-string (rx bos (* \u0026#34;/\u0026#34;)) \u0026#34;\u0026#34; slash-message-id))) (do-applescript (concat \u0026#34;tell application \\\u0026#34;Obsidian\\\u0026#34; to open location \\\u0026#34;obsidian://\u0026#34; message-id \u0026#34;\\\u0026#34; activate\u0026#34;)))) ;; on obsdian://aoeu link, this will call handler with //aoeu (org-link-set-parameters \u0026#34;obsidian\u0026#34; :follow #\u0026#39;org-obsidian-link-open) Logging Logging of entries. On marking entries as done, also record the state change by mmodifying org-log-note-headings variable to reflect the state change. This allows such state changes to be tracked in weekly review.\n(setq org-log-done (quote note)) (setq org-log-into-drawer t) (setq org-log-state-notes-insert-after-drawers nil) Tags excluded from inheritance (setq org-tags-exclude-from-inheritance \u0026#39;(\u0026#34;travel\u0026#34; \u0026#34;project\u0026#34; \u0026#34;crypt\u0026#34; \u0026#34;work_agenda\u0026#34; \u0026#34;personal_agenda\u0026#34; \u0026#34;area\u0026#34; \u0026#34;doc\u0026#34;)) \u0026#34;TODO\u0026#34; Keywords (setq org-todo-keywords (quote ( (sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;HOLD(h)\u0026#34; \u0026#34;BLOCKED(b)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;WORKING(w)\u0026#34; \u0026#34;SOMEDAY(s)\u0026#34; \u0026#34;GROUP(g)\u0026#34; ; READING \u0026#34;TO-READ(r)\u0026#34; \u0026#34;PROJ(p)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34; \u0026#34;FINISHED-READING(f)\u0026#34; \u0026#34;CANCELLED(c)\u0026#34; \u0026#34;OBSOLETE(o)\u0026#34; \u0026#34;GAVE-UP-READING(x)\u0026#34; )))) (setq org-todo-keyword-faces (quote ((\u0026#34;TODO\u0026#34; :foreground \u0026#34;\u0026#34; :weight bold) (\u0026#34;WORKING\u0026#34; :foreground \u0026#34;cyan\u0026#34; :weight bold) (\u0026#34;BLOCKED\u0026#34; :foreground \u0026#34;pink\u0026#34; :weight bold) (\u0026#34;HOLD\u0026#34; :foreground \u0026#34;gray\u0026#34; :weight bold) (\u0026#34;NEXT\u0026#34; :foreground \u0026#34;blue\u0026#34; :weight bold) (\u0026#34;DONE\u0026#34; :foreground \u0026#34;forest green\u0026#34; :weight bold) (\u0026#34;DONE\u0026#34; :foreground \u0026#34;yellow\u0026#34; :weight bold) (\u0026#34;CANCELLED\u0026#34; :foreground \u0026#34;gray\u0026#34; :weight bold) ))) Refile Settings Targets include this file and any file contributing to the agenda - up to 2 levels deep.\n(setq org-refile-targets (quote ((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))) Use full outline paths for refile.\n(setq org-refile-use-outline-path \u0026#39;file) ;; Allow refile to create parent tasks with confirmation (setq org-refile-allow-creating-parent-nodes (quote confirm)) Roam I use org roam to organize my notes. All the entries under ~/h are included - including the ones with \u0026#34;ARCHIVE\u0026#34; tag.\n(use-package org-roam :ensure t :custom (org-roam-v2-ack t) (org-roam-directory (file-truename \u0026#34;~/base/\u0026#34;)) (org-roam-graph-executable \u0026#34;/usr/local/bin/dot\u0026#34;) :bind ((\u0026#34;C-c n l\u0026#34; . org-roam-buffer-toggle) (\u0026#34;C-c n f\u0026#34; . org-roam-node-find) (\u0026#34;C-c n g\u0026#34; . org-roam-graph) (\u0026#34;C-c n i\u0026#34; . org-roam-node-insert) (\u0026#34;C-c n c\u0026#34; . org-roam-capture) (\u0026#34;C-c n m\u0026#34; . org-roam-node-random) (\u0026#34;C-c n s\u0026#34; . org-roam-db-sync) (\u0026#34;C-c n o\u0026#34; . org-id-get-create) ; Not using dailies as of now (\u0026#34;C-c n t\u0026#34; . org-roam-dailies-goto-today) (\u0026#34;C-c n d\u0026#34; . org-roam-dailies-goto-date) ) :config ; (setq org-roam-node-display-template (concat \u0026#34;${title:*} ${tags:*}\u0026#34;)) (org-roam-db-autosync-mode) ) (use-package helm :ensure t :config (helm-mode)) ; Skip entries with ARCHIVE tag set. ; (setq org-roam-db-node-include-function ; (lambda () ; (not (member \u0026#34;ARCHIVE\u0026#34; (org-get-tags))))) On android, there isn\u0026#39;t enough space to see tags in org roam node find functions. So skip tags when on android.\n(when (eq hs/platform \u0026#39;hs/platform/android) (setq org-roam-node-display-template (concat \u0026#34;${title:*}\u0026#34;))) https://www.orgroam.com/manual.html#Configuring-what-is-displayed-in-the-buffer\nMarkdown (setq org-roam-file-extensions \u0026#39;(\u0026#34;org\u0026#34; \u0026#34;md\u0026#34;)) Dailies Update as of [2023-09-14 Thu] - Well using dailies makes it really hard to search for past notes. I get a feeling that I have written something at some time, but scrolling by days is too painful compared to scrolling by weeks. Going back to weeklies.\nUpdate as of [2023-08-17 Thu] - Trying to use dailies. I think a clear file for each day maybe worth it.\nUpdate as of [2023-06-25 Sun] - I don\u0026#39;t use dailies.\nI use dailies as weekly notes. For each week, I have a weekly note representing the tasks that are part of the week, some thoughts etc. That is the first note that opens up as soon as you launch emacs.\n(setq org-roam-dailies-directory \u0026#34;~/base/daily/\u0026#34;) Quick Insert Nodes As opposed to org-roam-node-insert, this function allows you to insert a \u0026#34;work\u0026#34; node immediately without you having to break your writing. Just use a different key for this! (C-c n w)\n(defun hs/org-roam-node-insert-work () (interactive) (org-roam-node-insert (lambda (node) (member \u0026#34;work\u0026#34; (org-roam-node-tags node))) :templates \u0026#39;((\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;~/base/notes/notes/${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+timestamp: %T\\n#+filetags: work\\n\u0026#34;) :unnarrowed t :immediate-finish t)))) (global-set-key (kbd \u0026#34;C-c n w\u0026#34;) \u0026#39;hs/org-roam-node-insert-work) Find Nodes by Tag (defun hs/org-roam-find-by-tag () (interactive) (setq tag (completing-read \u0026#34;tag: \u0026#34; \u0026#39;( (\u0026#34;area\u0026#34; 1) (\u0026#34;project\u0026#34; 2) (\u0026#34;command\u0026#34; 3) ) nil t \u0026#34;\u0026#34;)) (org-roam-node-find nil nil (lambda (node) (member tag (org-roam-node-list node))) ) ) (global-set-key (kbd \u0026#34;C-c n C-f\u0026#34;) \u0026#39;hs/org-roam-find-by-tag) Roam buffer (add-to-list \u0026#39;display-buffer-alist \u0026#39;(\u0026#34;\\\\*org-roam\\\\*\u0026#34; (display-buffer-in-side-window) (side . right) (slot . 0) (window-width . 0.33) (window-parameters . ((no-other-window . t) (no-delete-other-windows . t))))) (setq org-roam-mode-section-functions \u0026#39;((org-roam-backlinks-section :unique t) (org-roam-reflinks-section) (org-roam-unlinked-references-section) ) ) Roam UI Configure Roam UI. It is dependent on websocket and simple-httpd so load them first.\n(use-package websocket :ensure t) (use-package simple-httpd :ensure t) (use-package org-roam-ui :bind ((\u0026#34;C-c n u\u0026#34; . \u0026#39;org-roam-ui-open) (\u0026#34;C-c n z\u0026#34; . \u0026#39;org-roam-ui-node-zoom) (\u0026#34;C-c n n\u0026#34; . \u0026#39;org-roam-ui-node-local)) :ensure t) Capture Templates Function to return journaling prompts. This function returns a prompt from base/public/templates/journaling-prompts randomly.\nLibrary Defines following functions:\nhs/get-journaling-prompt: Returns a single line from journaling prompts file. However, this is not needed anymore with org-ai.\nhs/org-capture-at-point: Adds captured template to the current position. This is bound to C-c 0.\n(defun hs/get-journaling-prompt () \u0026#34;Returns a single line from journaling prompts.\u0026#34; (save-window-excursion (find-file \u0026#34;~/base/public/templates/journaling-prompts\u0026#34;) (goto-char (point-max)) (let* ((number-of-prompts (- (line-number-at-pos) 10))) (goto-line (+ 10 (random number-of-prompts))) (s-chomp (thing-at-point \u0026#39;line t))))) (defun hs/org-capture-at-point () \u0026#34;Insert an org capture template at point.\u0026#34; (interactive) (org-capture 0)) (global-set-key (kbd \u0026#34;C-c 0\u0026#34;) #\u0026#39;hs/org-capture-at-point) (defun transform-square-brackets-to-round-ones(string-to-transform) \u0026#34;Transforms [ into ( and ] into ), other chars left unchanged.\u0026#34; (concat (mapcar #\u0026#39;(lambda (c) (if (equal c ?[) ?\\( (if (equal c ?]) ?\\) c))) string-to-transform))) (require \u0026#39;org-protocol) Org mode capture templates Capture templates are defined in base/templates.\n(require \u0026#39;org-capture) (setq org-capture-templates nil) ;; Section 1: Common capture patterns available on all platforms (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;j\u0026#34; \u0026#34;(j)ournal\u0026#34;) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;j5\u0026#34; \u0026#34;(5) Whys!\u0026#34; entry (file \u0026#34;~/base/personal/org/journal.org\u0026#34;) (file \u0026#34;~/base/public/templates/5-whys.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;je\u0026#34; \u0026#34;(e)ntry\u0026#34; entry (file \u0026#34;~/base/personal/org/journal.org\u0026#34;) (file \u0026#34;~/base/public/templates/journal-entry.capture\u0026#34;) :prepend t)) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;jr\u0026#34; \u0026#34;(r)andom prompt\u0026#34; entry (file \u0026#34;~/base/personal/org/journal.org\u0026#34;) (file \u0026#34;~/base/public/templates/journal-prompt.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;jt\u0026#34; \u0026#34;(t)thought Record\u0026#34; entry (file \u0026#34;~/base/personal/org/journal.org\u0026#34;) (file \u0026#34;~/base/personal/templates/journal-thought-record.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;t\u0026#34; \u0026#34;(t)odo\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/todo.capture\u0026#34;)) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;d\u0026#34; \u0026#34;(d)ecision\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/data-driven-decision.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;p\u0026#34; \u0026#34;(p)roject\u0026#34;) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;pp\u0026#34; \u0026#34;(p)ersonal project\u0026#34; entry (file \u0026#34;~/base/personal/org/tasks.org\u0026#34;) (file \u0026#34;~/base/public/templates/project.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;pw\u0026#34; \u0026#34;(w)ork project\u0026#34; entry (file \u0026#34;~/base/work/org/tasks.org\u0026#34;) (file \u0026#34;~/base/public/templates/project.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;f\u0026#34; \u0026#34;(f)eedback\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/feedback.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;w\u0026#34; \u0026#34;(w)eekly notes\u0026#34;) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;wp\u0026#34; \u0026#34;weekly (p)lan\u0026#34; entry (file \u0026#34;~/base/personal/org/weekly.org\u0026#34;) (file \u0026#34;~/base/public/templates/weekly-kickstart.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;wr\u0026#34; \u0026#34;(r)etrospective entry\u0026#34; entry (file \u0026#34;~/base/personal/org/weekly.org\u0026#34; :prepend t) (file \u0026#34;~/base/public/templates/weekly-retrospective.capture\u0026#34;))) ;; Section 2: Capture patterns not available on android (when (not (eq hs/platform \u0026#39;hs/platform/android)) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;b\u0026#34; \u0026#34;(b)ookmark\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/protocol.capture\u0026#34;)) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;L\u0026#34; \u0026#34;add note to currently c(l)ocked Task\u0026#34; entry (clock) (file \u0026#34;~/base/public/templates/current-clocked.capture\u0026#34;) :prepend t) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;c\u0026#34; \u0026#34;Command\u0026#34;) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;cc\u0026#34; \u0026#34;regular (c)ommand\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/command.capture\u0026#34;)) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;cd\u0026#34; \u0026#34;(d)ynamic command\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/dynamic-command.capture\u0026#34;)) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;r\u0026#34; \u0026#34;(r)esource\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/resource.capture\u0026#34;)) t) (add-to-list \u0026#39;org-capture-templates \u0026#39;(\u0026#34;m\u0026#34; \u0026#34;(m)eeting\u0026#34; entry (file \u0026#34;~/base/personal/org/inbox.org\u0026#34;) (file \u0026#34;~/base/public/templates/meeting.capture\u0026#34;)) t) ) Org roam capture templates Update on [2024-04-01 Mon] - okay back to org-roam. I think emacs wins after all. Starting new team today, and want to go back to things that have worked well in the past.\n; This is commented. The goal is to use the default template. (setq org-roam-dailies-capture-templates \u0026#39;((\u0026#34;d\u0026#34; \u0026#34;default\u0026#34; entry \u0026#34;* %?\u0026#34; :target (file+head \u0026#34;%\u0026lt;%Y-%m\u0026gt;.org\u0026#34; \u0026#34;#+title: Notes for %\u0026lt;%b %Y\u0026gt;\\n\u0026#34;))))\n(setq org-roam-capture-templates \u0026#39;( (\u0026#34;w\u0026#34; \u0026#34;Work\u0026#34;) (\u0026#34;wd\u0026#34; \u0026#34;work doc\u0026#34; plain (file \u0026#34;~/base/work/templates/doc.capture\u0026#34;) :if-new (file \u0026#34;~/base/work/org/docs/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;wn\u0026#34; \u0026#34;work note\u0026#34; plain (file \u0026#34;~/base/public/templates/roam-note.capture\u0026#34;) :if-new (file \u0026#34;~/base/work/notes/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;wm\u0026#34; \u0026#34;work markdown note\u0026#34; plain (file \u0026#34;~/base/work/templates/markdown.capture\u0026#34;) :if-new (file \u0026#34;~/base/work/notes/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;wq\u0026#34; \u0026#34;work question\u0026#34; plain (file \u0026#34;~/base/public/templates/roam-question.capture\u0026#34;) :if-new (file \u0026#34;~/base/work/notes/questions/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;c\u0026#34; \u0026#34;Chords\u0026#34; plain (file \u0026#34;~/base/public/templates/chords.capture\u0026#34;) :if-new (file \u0026#34;~/base/sites/chords/posts/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;n\u0026#34; \u0026#34;Personal note\u0026#34; plain (file \u0026#34;~/base/public/templates/roam-note.capture\u0026#34;) :if-new (file \u0026#34;~/base/personal/notes/current/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;x\u0026#34; \u0026#34;Public note\u0026#34; plain (file \u0026#34;~/base/public/templates/roam-public-note.capture\u0026#34;) :if-new (file \u0026#34;~/base/public/notes/${slug}.org\u0026#34;) :unnarrowed t) (\u0026#34;?\u0026#34; \u0026#34;question\u0026#34; plain (file \u0026#34;~/base/public/templates/roam-question.capture\u0026#34;) :if-new (file \u0026#34;~/base/personal/notes/current/${slug}.org\u0026#34;) :unnarrowed t) )) Instead of using org roam capture template for chords, use https://emacs.stackexchange.com/questions/40749/using-user-prompted-file-name-for-org-capture-in-template. This avoids having ID field initialized. You can add a custom \u0026#34;:noexport\u0026#34; tagged header below for org roam discoverability.\nCustom ID Setter (defun hs/org-roam-set-id () (interactive) (message (cond ((string= (buffer-name) \u0026#34;weekly.org\u0026#34;) (org-set-property \u0026#34;ID\u0026#34; (format-time-string \u0026#34;week-%Y-%U\u0026#34;) )) ((string= (buffer-name) \u0026#34;meeting.org\u0026#34;) (org-set-property \u0026#34;ID\u0026#34; (format-time-string \u0026#34;meeting-%\u0026lt;%s\u0026gt;\u0026#34;) )) (t (org-id-get-create)) )) ) Agenda Configuration Following table describes how files are put into org-agenda-files:\nPersonal Focus Work Focus Base Directory ~/base/org/personal ~/base/work/org Files with roam tag agenda agenda (defun hs/roam-get-agenda-files () \u0026#34;Return a list of note files containing work_agenda tag.\u0026#34; ; (seq-uniq (seq-map #\u0026#39;car (org-roam-db-query [:select [nodes:file] :from tags :left-join nodes :on (= tags:node-id nodes:id) :where (like tag (quote \u0026#34;%\\\u0026#34;agenda\\\u0026#34;%\u0026#34;))])))) (setq org-agenda-files (directory-files-recursively \u0026#34;~/base/personal/org\u0026#34; \u0026#34;\\.org$\u0026#34;)) (setq org-directory \u0026#34;~/base/personal/org/\u0026#34;) (defun hs/org-focus-work() \u0026#34;Set focus to work\u0026#34; (interactive) (setq org-agenda-files (directory-files-recursively \u0026#34;~/base/work/org\u0026#34; \u0026#34;\\.org$\u0026#34;)) (setq org-directory \u0026#34;~/base/work/org\u0026#34;) (add-to-list \u0026#39;org-agenda-files \u0026#34;~/base/personal/org/habits.org\u0026#34;) (setq org-agenda-files (append org-agenda-files (hs/roam-get-agenda-files))) (setq org-refile-targets (quote ((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))) ) (defun hs/org-focus-personal() \u0026#34;Set focus to personal\u0026#34; (interactive) (setq org-directory \u0026#34;~/base/personal/org/\u0026#34;) (setq org-agenda-files (directory-files-recursively \u0026#34;~/base/personal/org\u0026#34; \u0026#34;\\.org$\u0026#34;)) (setq org-agenda-files (append org-agenda-files (hs/roam-get-agenda-files))) (setq org-refile-targets (quote ((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))) ) (defun hs/org-focus-clear() \u0026#34;Clear Focus\u0026#34; (interactive) (setq org-directory \u0026#34;~/base/personal/org\u0026#34;) (setq org-agenda-files (directory-files-recursively \u0026#34;~/base/personal/org/\u0026#34; \u0026#34;\\.org$\u0026#34;)) (setq org-agenda-files (append org-agenda-files (directory-files-recursively \u0026#34;~/base/work/org/\u0026#34; \u0026#34;\\.org$\u0026#34;))) (setq org-agenda-files (append org-agenda-files (hs/roam-get-agenda-files))) (setq org-refile-targets (quote ((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))) ) (global-set-key (kbd \u0026#34;\\C-c f w\u0026#34;) \u0026#39;hs/org-focus-work) (global-set-key (kbd \u0026#34;\\C-c f p\u0026#34;) \u0026#39;hs/org-focus-personal) (global-set-key (kbd \u0026#34;\\C-c f c\u0026#34;) \u0026#39;hs/org-focus-clear) (hs/org-focus-clear) THIS CONFIG SHOULD NOT BE ENABLED BY DEFAULT.\nThis is a config that should only be enabled to see if there are any task related items present in nodes/ directory. If such items are present, either move them to inbox.org or move them to appropriate project under notes/projects.\n(directory-files-recursively \u0026#34;~/base/work/org\u0026#34; \u0026#34;\\.org$\u0026#34; nil nil t) (setq org-agenda-sorting-strategy \u0026#39;(time-up)) (setq org-agenda-tags-column \u0026#39;auto) (setq org-agenda-start-with-log-mode t) (add-hook \u0026#39;org-agenda-mode-hook \u0026#39;(lambda () (hl-line-mode 1) (abbrev-mode 1) ) \u0026#39;append) Default agenda span is a day.\n(setq org-agenda-span \u0026#39;day) Show habits in agenda view.\n(setq org-habit-show-habits t) Show habits on column 70.\n(if (eq hs/platform \u0026#39;hs/platform/android) (setq org-habit-graph-column 20) (setq org-habit-graph-column 70) ) Show habit consistency graphs.\n(when (not (eq hs/platform \u0026#39;hs/platform/android)) (setq org-habit-show-all-today t)) (defun hs/org-get-prefix () (let ( (tags (org-get-tags (point))) (birthday (member \u0026#34;birthday\u0026#34; (org-get-tags (point)))) (home (member \u0026#34;home\u0026#34; (org-get-tags (point)))) (scheduled (org-get-scheduled-time (point))) (deadline (org-get-deadline-time (point))) ) (if (member \u0026#34;urgent\u0026#34; tags) (setq prefix \u0026#34;🚨\u0026#34;) (if (member \u0026#34;pinned\u0026#34; tags) (setq prefix \u0026#34;📌\u0026#34;) (if scheduled (setq prefix \u0026#34;🕑\u0026#34;) (if deadline (setq prefix \u0026#34;🛑\u0026#34;) (setq prefix \u0026#34; \u0026#34;))))) (if scheduled (concat prefix (format-time-string \u0026#34; %m/%d:\u0026#34; scheduled)) (concat prefix (format-time-string \u0026#34; %m/%d:\u0026#34; deadline)) ) ) ) (defun hs/org-get-resource-prefix () (let ( (tags (org-get-tags (point))) ) (if (member \u0026#34;doc\u0026#34; tags) (setq prefix \u0026#34; 📄 \u0026#34;) (if (member \u0026#34;code\u0026#34; tags) (setq prefix \u0026#34; 💽 \u0026#34;) (setq prefix \u0026#34; \u0026#34;) )) ) ) (if (eq hs/platform \u0026#39;hs/platform/android) (setq org-agenda-prefix-format \u0026#39;( (agenda . \u0026#34;\u0026#34;) (todo . \u0026#34;\u0026#34;) )) (setq org-agenda-prefix-format \u0026#39;( (agenda . \u0026#34;%-4.8c\\t.. %-6e%-12t %-10(hs/org-get-prefix) \u0026#34;) (todo . \u0026#34;%-4.8c\\t.. %-6e%-12t %-10(hs/org-get-prefix) \u0026#34;) )) ) Super Agenda\n(use-package org-super-agenda :ensure t :config (org-super-agenda-mode)) (setq org-agenda-overriding-header \u0026#34;[[em:agenda][Home]] | [[file:~/base/personal/org/weekly.org::Weekly Notes][Weekly]] | [[file:~/base/personal/org/diary][Diary]]\\n\\n * Agenda *\\n\u0026#34;) (setq org-super-agenda-groups \u0026#39;( (:discard (:todo \u0026#34;DONE\u0026#34;)) (:name \u0026#34;* Habits *\\n\u0026#34; :habit t) (:name \u0026#34;* Books *\\n\u0026#34; :and (:tag \u0026#34;book\u0026#34;)) (:name \u0026#34;* Urgent *\\n\u0026#34; :and (:tag \u0026#34;urgent\u0026#34;)) (:name \u0026#34;* Agenda for Today *\\n\u0026#34; :scheduled today :date today) (:name \u0026#34;* Pins *\\n\u0026#34; :and (:tag \u0026#34;pinned\u0026#34;)) (:name \u0026#34;* Overdue Items *\\n\u0026#34; :scheduled past :deadline past) (:name \u0026#34;** Appointments ** \\n\u0026#34; :and (:tag \u0026#34;appointment\u0026#34;)) (:name \u0026#34;* Deadlines *\\n\u0026#34; :deadline future) (:name \u0026#34;* PROJECTS *\\n\u0026#34; :and (:tag \u0026#34;project\u0026#34;)) ) ) (setq org-agenda-custom-commands \u0026#39;( (\u0026#34;t\u0026#34; \u0026#34;Tasks Dashboard\u0026#34; ( (alltodo \u0026#34;\u0026#34; ( (org-agenda-overriding-header \u0026#34;[[em:agenda][Home]] | [[file:~/base/personal/org/weekly.org::Weekly Notes][Weekly]] | [[file:~/base/personal/org/diary][Diary]]\\n\\n * Tasks *\u0026#34;) (org-agenda-prefix-format \u0026#39;((todo . \u0026#34;%-4.8c\\t.. %-6e%-12t %-10(hs/org-get-prefix) \u0026#34;))) (org-super-agenda-groups \u0026#39;( (:name \u0026#34;** Habits **\\n\u0026#34; :habit t) (:name \u0026#34;* Books *\\n\u0026#34; :and (:tag \u0026#34;book\u0026#34;)) (:name \u0026#34;** Urgent **\\n\u0026#34; :and (:tag \u0026#34;urgent\u0026#34;) ) (:name \u0026#34;** Pinned **\\n\u0026#34; :and (:tag \u0026#34;pinned\u0026#34;) ) (:name \u0026#34;** Overdue ** \\n\u0026#34; :scheduled past :deadline past ) (:name \u0026#34;** Appointments ** \\n\u0026#34; :and (:tag \u0026#34;appointment\u0026#34;) ) (:name \u0026#34;** Active **\\n\u0026#34; :todo \u0026#34;WORKING\u0026#34; :face (:foreground \u0026#34;peru\u0026#34;)) (:name \u0026#34;** Today! **\\n\u0026#34; :scheduled today :deadline today) (:name \u0026#34;** Upcoming! **\\n\u0026#34; :and (:scheduled future :not (:tag \u0026#34;birthday\u0026#34;)) :and (:deadline future :not (:tag \u0026#34;birthday\u0026#34;)) ) (:name \u0026#34;** Next **\\n\u0026#34; :todo \u0026#34;NEXT\u0026#34;) (:name \u0026#34;** Blocked **\\n\u0026#34; :todo \u0026#34;BLOCKED\u0026#34;) (:name \u0026#34;** Someday **\\n\u0026#34; :todo \u0026#34;SOMEDAY\u0026#34; :order 100) (:name \u0026#34;** Backlog **\\n\u0026#34; :and (:scheduled nil :deadline nil) :order 90) (:discard (:anything t)) )) ) ) ) ) (\u0026#34;i\u0026#34; \u0026#34;Inbox\u0026#34; ( (tags \u0026#34;+inbox\u0026#34; ( (org-agenda-overriding-header \u0026#34; * Inbox *\u0026#34;) ) ) ) ) (\u0026#34;r\u0026#34; \u0026#34;Resources\u0026#34; ( (tags \u0026#34;+doc|+code\u0026#34; ( (org-agenda-overriding-header \u0026#34;[[em:agenda][Home]] | [[file:~/base/personal/org/weekly.org][Weekly]] | [[file:~/base/personal/org/diary][Diary]]\\n\\n * Resources *\u0026#34;) (org-agenda-prefix-format \u0026#39;((tags . \u0026#34;%-5(hs/org-get-resource-prefix)\u0026#34;))) (org-super-agenda-groups \u0026#39;( (:name \u0026#34;📎 Pinned\u0026#34; :and (:tag \u0026#34;pinned\u0026#34;)) (:name \u0026#34;🔎 Needs Review\u0026#34; :and (:tag \u0026#34;review\u0026#34;)) (:name \u0026#34;✏️ Draft\u0026#34; :tag \u0026#34;draft\u0026#34;) (:name \u0026#34;💠 Rest\u0026#34; :anything) )) ) ) ) ) ) ) Clocking ;; Separate drawers for clocking and logs (setq org-drawers (quote (\u0026#34;PROPERTIES\u0026#34; \u0026#34;LOGBOOK\u0026#34;))) (setq org-clock-into-drawer t) (setq org-clock-out-remove-zero-time-clocks t) (setq org-clock-out-when-done t) Special Tags ; Tags with fast selection keys (setq org-tag-alist (quote ( (\u0026#34;urgent\u0026#34; . ?u) (\u0026#34;agenda\u0026#34; . ?a) (\u0026#34;work\u0026#34; . ?w) (\u0026#34;pinned\u0026#34; . ?p) (\u0026#34;project\u0026#34; . ?r) (\u0026#34;ARCHIVE\u0026#34; . ?x) ))) ; Allow setting single tags without the menu (setq org-fast-tag-selection-single-key (quote expert)) Xeft! (use-package deadgrep :ensure t) (global-set-key (kbd \u0026#34;C-c d\u0026#34;) #\u0026#39;deadgrep) (use-package xeft :ensure t) (setq xeft-directory \u0026#34;~/base/\u0026#34;) (setq xeft-recursive t) (global-set-key (kbd \u0026#34;C-c x\u0026#34;) #\u0026#39;xeft) Prettify (add-hook \u0026#39;org-mode-hook (lambda () \u0026#34;Beautify Org Checkbox Symbol\u0026#34; (push \u0026#39;(\u0026#34;[ ]\u0026#34; . \u0026#34;☐\u0026#34;) prettify-symbols-alist) (push \u0026#39;(\u0026#34;[X]\u0026#34; . \u0026#34;☑\u0026#34; ) prettify-symbols-alist) (push \u0026#39;(\u0026#34;[-]\u0026#34; . \u0026#34;❍\u0026#34; ) prettify-symbols-alist) (prettify-symbols-mode))) (defface org-checkbox-done-text \u0026#39;((t (:foreground \u0026#34;#71696A\u0026#34; :strike-through t))) \u0026#34;Face for the text part of a checked org-mode checkbox.\u0026#34;) (font-lock-add-keywords \u0026#39;org-mode `((\u0026#34;^[ \\t]*\\\\(?:[-+*]\\\\|[0-9]+[).]\\\\)[ \\t]+\\\\(\\\\(?:\\\\[@\\\\(?:start:\\\\)?[0-9]+\\\\][ \\t]*\\\\)?\\\\[\\\\(?:X\\\\|\\\\([0-9]+\\\\)/\\\\2\\\\)\\\\][^\\n]*\\n\\\\)\u0026#34; 1 \u0026#39;org-checkbox-done-text prepend)) \u0026#39;append) Highlight Text Going forward, just use org-remark for highlights.\n(add-to-list \u0026#39;org-emphasis-alist \u0026#39;(\u0026#34;/\u0026#34; (:background \u0026#34;yellow\u0026#34; :foreground \u0026#34;black\u0026#34;) )) Structured Templates org-tempo converts \u0026lt;q to quote block once you hit tab.\n(use-package org-tempo :ensure nil :after org :config (let ((templates \u0026#39;((\u0026#34;sh\u0026#34; . \u0026#34;src sh\u0026#34;) (\u0026#34;el\u0026#34; . \u0026#34;src emacs-lisp\u0026#34;) (\u0026#34;py\u0026#34; . \u0026#34;src python :results output\u0026#34;) (\u0026#34;ai\u0026#34; . \u0026#34;ai :max-tokens 256 :noweb yes\u0026#34;) ))) (dolist (template templates) (push template org-structure-template-alist)))) Keybindings (global-set-key (kbd \u0026#34;C-c c\u0026#34;) \u0026#39;org-capture) (global-set-key (kbd \u0026#34;C-c a\u0026#34;) \u0026#39;org-agenda) (global-set-key (kbd \u0026#34;C-c t\u0026#34;) \u0026#39;hs/org-schedule-today) (global-set-key (kbd \u0026#34;C-c i\u0026#34;) \u0026#39;org-clock-in) (global-set-key (kbd \u0026#34;C-c o\u0026#34;) \u0026#39;org-clock-out) Pomodoro This is a simple library function that starts a pomodoro timer and automatically clocks in the current task. So the expected usage of this function is to put cursor on the current task and start a pomodoro timer.\n(require \u0026#39;notifications) (defun hs/org-clock-out-and-notify () (interactive) (org-clock-out) (notifications-notify :title \u0026#34;🍅 Pomodoro Timer Finished\u0026#34; :body \u0026#34;Pomodoro timer finished, please ensure.\u0026#34;) ) (defun hs/pomodoro (mins) (interactive (list (read-number \u0026#34;🍅 Pomodoro Focus Time (mins): \u0026#34; 25))) (if (string= (buffer-name) \u0026#34;*Org Agenda*\u0026#34;) (org-agenda-clock-in) (org-clock-in)) (org-timer-set-timer (concat (number-to-string (/ mins 60)) \u0026#34;:\u0026#34; (number-to-string (% mins 60)) \u0026#34;:00\u0026#34; ) ) (run-at-time (concat (number-to-string mins) \u0026#34;min\u0026#34;) nil \u0026#39;hs/org-clock-out-and-notify) ) (global-set-key (kbd \u0026#34;C-c p\u0026#34;) \u0026#39;hs/pomodoro) Reveal (use-package ox-reveal :ensure t :custom (org-reveal-root \u0026#34;https://cdn.jsdelivr.net/npm/reveal.js\u0026#34;) (org-reveal-mathjax t)) (use-package htmlize :ensure t) org-tree-slide (use-package org-tree-slide :ensure t) (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt;\u0026#34;) \u0026#39;org-tree-slide-mode) (global-set-key (kbd \u0026#34;S-\u0026lt;f8\u0026gt;\u0026#34;) \u0026#39;org-tree-slide-skip-done-toggle) Archiving Change the location every year.\n(setq org-archive-location \u0026#34;~/base/archives/2024/archive.org::* %s\u0026#34;) Diary (setq diary-file \u0026#34;~/base/personal/org/diary\u0026#34;) (setq org-agenda-include-diary t) Mobile I don\u0026#39;t use it anymore. So I\u0026#39;ll leave it commented.\n(require \u0026#39;org-mobile) (setq org-mobile-directory \u0026#34;tmp/orgmobile\u0026#34;) (setq org-mobile-capture-file \u0026#34;Capture.org\u0026#34;) (setq org-mobile-inbox-for-pull \u0026#34;~/base/notes/org/inbox.org\u0026#34;) (setq org-mobile-files (org-agenda-files)) (setq org-mobile-agendas \u0026#39;(\u0026#34;z\u0026#34;))\nOrg-Remark Update as of [2024-04-04 Thu]: Trying to use it again for doc comments and leaving TODOs inside docs.\nUpdate as of ??: not using anymore\nAllows you to leave annotations on plain text org files.\n(use-package org-remark :ensure t :custom (org-remark-notes-file-name \u0026#34;~/base/work/org/remark.org\u0026#34;) (org-remark-global-tracking-mode +1) :config (org-remark-create \u0026#34;commenter\u0026#34; \u0026#39;(:underline \u0026#34;Green\u0026#34; :background \u0026#34;DarkSeaGreen1\u0026#34; :foreground \u0026#34;black\u0026#34;) \u0026#39;(CATEGORY \u0026#34;comment\u0026#34;)) (define-key org-remark-mode-map (kbd \u0026#34;s-o\u0026#34;) #\u0026#39;org-remark-open) (define-key org-remark-mode-map (kbd \u0026#34;s-\u0026lt;mouse-1\u0026gt;\u0026#34;) #\u0026#39;org-remark-open) (define-key org-remark-mode-map (kbd \u0026#34;s-\u0026lt;mouse-3\u0026gt;\u0026#34;) #\u0026#39;org-remark-mark) (define-key org-remark-mode-map (kbd \u0026#34;s-]\u0026#34;) #\u0026#39;org-remark-view-next) (define-key org-remark-mode-map (kbd \u0026#34;s-[\u0026#34;) #\u0026#39;org-remark-view-prev) (define-key org-remark-mode-map (kbd \u0026#34;s-d\u0026#34;) #\u0026#39;org-remark-remove) (define-key org-remark-mode-map (kbd \u0026#34;s-r\u0026#34;) #\u0026#39;org-remark-toggle) (define-key org-remark-mode-map (kbd \u0026#34;s-n\u0026#34;) #\u0026#39;org-remark-mark-commenter) ) Gnuplot mode (use-package gnuplot-mode :ensure t) Org AI For whatever reason, \u0026#34;string-equal-ignore-case\u0026#34; doesn\u0026#39;t seem to work in my setup. This function is referenced through org-ai\u0026#39;s \u0026#34;org-ai.el\u0026#34; file. I have simply just replaced it with \u0026#34;string=\u0026#34; for now. I then deleted all the \u0026#34;.elc\u0026#34; files from that folder and restarted emacs. Things work fine now, but something to watch out next time you update the config / update emacs or whatever.\n(use-package org-ai :ensure t :commands (org-ai-mode org-ai-global-mode) :init (add-hook \u0026#39;org-mode-hook #\u0026#39;org-ai-mode) ; enable org-ai in org-mode (org-ai-global-mode) ; installs global keybindings on C-c M-a :config ) (setq org-ai-image-directory \u0026#34;~/base/data/ai-images\u0026#34;) Set API token.\n(org-babel-load-file \u0026#34;~/base/personal/notes/current/openai_api_token.org\u0026#34;) Transclusion (use-package org-transclusion :ensure t) (set-face-attribute \u0026#39;org-transclusion-fringe nil :foreground \u0026#34;gray75\u0026#34; :background \u0026#34;gray75\u0026#34;) Org Special Copy This command does one of the following:\nCopies from table cell if we are inside a table Copies from source block if we are inside a block (defun hs/org-special-copy() (interactive) (if (org-at-table-p) (kill-new (string-trim (substring-no-properties(org-table-get-field)))) (kill-new (plist-get (cadr (org-element-at-point)) :value))) (message \u0026#34;Copied.\u0026#34;) ) (global-set-key (kbd \u0026#34;\u0026lt;mouse-2\u0026gt;\u0026#34;) \u0026#39;hs/org-special-copy) (global-set-key (kbd \u0026#34;C-c b\u0026#34;) \u0026#39;hs/org-special-copy) Export Backends (setq org-export-backends \u0026#39;(ascii html icalendar latex md odt)) Dired Sidebar Mode (use-package dired-sidebar :bind ((\u0026#34;C-x C-n\u0026#34; . dired-sidebar-toggle-sidebar)) :ensure t :commands (dired-sidebar-toggle-sidebar) :init (add-hook \u0026#39;dired-sidebar-mode-hook (lambda () (unless (file-remote-p default-directory) (auto-revert-mode)))) :config (push \u0026#39;toggle-window-split dired-sidebar-toggle-hidden-commands) (push \u0026#39;rotate-windows dired-sidebar-toggle-hidden-commands) (setq dired-sidebar-subtree-line-prefix \u0026#34;__\u0026#34;) (setq dired-sidebar-theme \u0026#39;vscode) (setq dired-sidebar-use-term-integration t) (setq dired-sidebar-use-custom-font nil)) (use-package vscode-icon :ensure t :commands (vscode-icon-for-file)) Keybindings Misc Bindings ;; HS minor mode (global-set-key (kbd \u0026#34;C-c h s\u0026#34;) \u0026#39;hs-minor-mode) (global-set-key (kbd \u0026#34;C-c -\u0026#34;) \u0026#39;hs-hide-block) (global-set-key (kbd \u0026#34;C-c h -\u0026#34;) \u0026#39;hs-hide-all) (global-set-key (kbd \u0026#34;C-c =\u0026#34;) \u0026#39;hs-show-block) (global-set-key (kbd \u0026#34;C-c h =\u0026#34;) \u0026#39;hs-show-all) ;; White-space mode (global-set-key (kbd \u0026#34;C-c W\u0026#34;) \u0026#39;whitespace-mode) ;; Comment lines (global-set-key (kbd \u0026#34;C-c / /\u0026#34;) \u0026#39;comment-or-uncomment-region) (global-set-key (kbd \u0026#34;C-c / *\u0026#34;) \u0026#39;comment-region) (global-set-key (kbd \u0026#34;C-c * /\u0026#34;) \u0026#39;uncomment-region) ;; ibuffer (global-set-key (kbd \u0026#34;C-x C-b\u0026#34;) \u0026#39;ibuffer) Simplified Bindings for Org Mode Uncomment this block if you want to use simpler keybindings for Org mode.\n(setq shift-select-mode t) (setq org-support-shift-select t) (global-set-key (kbd \u0026#34;\u0026lt;f1\u0026gt;\u0026#34;) \u0026#39;ibuffer) (global-set-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;delete-other-windows) (global-set-key (kbd \u0026#34;M-t\u0026#34;) \u0026#39;org-ctrl-c-ctrl-c) (global-set-key (kbd \u0026#34;M-s\u0026#34;) \u0026#39;org-schedule) (global-set-key (kbd \u0026#34;M-d\u0026#34;) \u0026#39;org-deadline) (global-set-key (kbd \u0026#34;M-a\u0026#34;) \u0026#39;org-agenda) (global-set-key (kbd \u0026#34;M-c\u0026#34;) \u0026#39;org-capture) (global-set-key (kbd \u0026#34;\u0026lt;f11\u0026gt;\u0026#34;) \u0026#39;org-clock-in) (global-set-key (kbd \u0026#34;\u0026lt;f12\u0026gt;\u0026#34;) \u0026#39;org-clock-out) Custom Faces I like my headings to be larger than normal text\n(custom-set-faces \u0026#39;(org-level-1 ((t (:inherit outline-1 :height 1.8)))) \u0026#39;(org-level-2 ((t (:inherit outline-2 :height 1.4)))) \u0026#39;(org-level-3 ((t (:inherit outline-3 :height 1.2)))) \u0026#39;(org-level-4 ((t (:inherit outline-4 :height 1.1)))) \u0026#39;(org-level-5 ((t (:inherit outline-5 :height 1.0)))) \u0026#39;(org-table ((t (:extend t :foreground \u0026#34;black\u0026#34; :background \u0026#34;gray\u0026#34;)))) \u0026#39;(org-document-title ((t (:height 250)))) ) Calendar (setq calendar-latitude 47.79) (setq calendar-longitude -122.18) (setq calendar-location-name \u0026#34;Bothell, WA\u0026#34;) (defun solar-sunrise-string (date \u0026amp;optional nolocation) \u0026#34;String of *local* time of sunrise and daylight on Gregorian DATE.\u0026#34; (let ((l (solar-sunrise-sunset date))) (format \u0026#34;%s (%s hours daylight)\u0026#34; (if (car l) (concat \u0026#34;Sunrise \u0026#34; (apply \u0026#39;solar-time-string (car l))) \u0026#34;no sunrise\u0026#34;) (nth 2 l) ))) (defun diary-sunrise () \u0026#34;Local time of sunrise as a diary entry. Accurate to a few seconds.\u0026#34; (or (and calendar-latitude calendar-longitude calendar-time-zone) (solar-setup)) (solar-sunrise-string date)) (defun solar-sunset-string (date \u0026amp;optional nolocation) \u0026#34;String of *local* time of sunset and daylight on Gregorian DATE.\u0026#34; (let ((l (solar-sunrise-sunset date))) (format \u0026#34;%s\u0026#34; (if (cadr l) (concat \u0026#34;Sunset \u0026#34; (apply \u0026#39;solar-time-string (cadr l))) \u0026#34;no sunset\u0026#34;) ))) (defun diary-sunset () \u0026#34;Local time of sunset as a diary entry. Accurate to a few seconds.\u0026#34; (or (and calendar-latitude calendar-longitude calendar-time-zone) (solar-setup)) (solar-sunset-string date)) Misc Configuration ;; make emacs use the clipboard (setq x-select-enable-clipboard t) (setq make-backup-files nil) (put \u0026#39;set-goal-column \u0026#39;disabled nil) ;; Transparently open compressed files (auto-compression-mode t) ;; Enable syntax highlighting for older Emacsen that have it off (global-font-lock-mode t) ;; Save a list of recent files visited. ;; (recentf-mode 1) ;; Highlight matching parentheses when the point is on them. (show-paren-mode 1) ;; (set-default \u0026#39;indicate-empty-lines t) (set-default \u0026#39;imenu-auto-rescan t) (add-hook \u0026#39;text-mode-hook \u0026#39;turn-on-auto-fill) (defalias \u0026#39;yes-or-no-p \u0026#39;y-or-n-p) (random t) ;; Seed the random-number generator (set-face-attribute \u0026#39;default nil :height 120) (setq-default fill-column 92) Server Starting (Reference)\n(require \u0026#39;server) (or (server-running-p) (server-start)) Post Config ;(find-file \u0026#34;~/base/personal/org/dashboard.org\u0026#34;) (setq warning-minimum-level \u0026#39;error) ARCHIVE Configuration that is not used anymore\nObsidian Mode This mode is not used as of [2024-04-16 Tue].\n(use-package obsidian :ensure t :demand t :config (obsidian-specify-path \u0026#34;~/base/notes/notes\u0026#34;) (global-obsidian-mode t) :custom ;; This directory will be used for `obsidian-capture\u0026#39; if set. (obsidian-inbox-directory \u0026#34;Inbox\u0026#34;) (obsidian-daily-notes-directory \u0026#34;Journal\u0026#34;) :bind (:map obsidian-mode-map ;; Trying to keep these consistent with org-roam mode. (\u0026#34;C-c m o\u0026#34; . obsidian-follow-link-at-point) ;; Jump to backlinks (\u0026#34;C-c m b\u0026#34; . obsidian-backlink-jump) ;; If you prefer you can use obsidian-insert-link (\u0026#34;C-c m l\u0026#34; . obsidian-insert-wikilink))) (global-set-key (kbd \u0026#34;C-c m f\u0026#34;) \u0026#39;obsidian-search) (global-set-key (kbd \u0026#34;C-c m c\u0026#34;) \u0026#39;obsidian-capture) Links to this note org mode: digital garden is also generated using org mode. My Emacs Configuration has a section "
            }
    
        ,
            {
                "id": 10,
                "href": "/posts/quick-cscope-emacs-hack/",
                "title": "Quick emacs+cscope hack for broken symlinks",
                "section": "posts",
                "date" : "2020.10.12",
                "body": " I use cscope in emacs as my primary code browsing tool for Linux kernel development. However, I started to get annoyed by cscope errors for broken symlinks. What is happening is that during the Linux kernel build process, a few symlinks get created which are not needed once the kernel is built. I presume that the build tooling doesn\u0026#39;t clean up these symlinks after they are removed and that confuses the cscope program. This results in the following annoying messages when I try to lookup definition or text or anything:\n====================================================================== Finding symbohttp:// EXT4_FC_TAG_LINK Database directory: /usr/local/google/home/harshads/repo/github-harshadjs-linux/ cscope: cannot find file include/dt-bindings/input/linux-event-codes.h cscope: cannot find file include/dt-bindings/clock/qcom,dispcc-sm8150.h cscope: cannot find file tools/testing/selftests/powerpc/nx-gzip/include/vas-api.h cscope: cannot find file tools/testing/selftests/powerpc/vphn/vphn.c cscope: cannot find file tools/testing/selftests/powerpc/vphn/asm/lppaca.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/ppc_asm.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/asm-compat.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/feature-fixups.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/asm-const.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/word-at-a-time.h fs/ext4/fast_commit.h: \u0026lt;global\u0026gt;[10] #define EXT4_FC_TAG_LINK 0x0004 fs/ext4/fast_commit.c: __ext4_fc_track_link[443] args.op = EXT4_FC_TAG_LINK; ext4_fc_replay_link[1360] trace_ext4_fc_replay(sb, EXT4_FC_TAG_LINK, darg.ino, tag2str[1776] case EXT4_FC_TAG_LINK: ext4_fc_replay_scan[1951] case EXT4_FC_TAG_LINK: ext4_fc_replay[2056] case EXT4_FC_TAG_LINK: These cannot find file messages get flooded in the cscope tiny buffer. For now, I have implemented a quick fix where I have added a wrapper around cscope that directs the messages wrote to stderr to /dev/null. Here\u0026#39;s how it looks:\n#!/bin/bash cscope-bin $@ 2\u0026gt;/dev/null With this, now the cscope buffer looks pretty again!\n====================================================================== Finding symbohttp:// EXT4_FC_TAG_LINK Database directory: /usr/local/google/home/harshads/repo/github-harshadjs-linux/ fs/ext4/fast_commit.h: \u0026lt;global\u0026gt;[10] #define EXT4_FC_TAG_LINK 0x0004 fs/ext4/fast_commit.c: __ext4_fc_track_link[443] args.op = EXT4_FC_TAG_LINK; ext4_fc_replay_link[1360] trace_ext4_fc_replay(sb, EXT4_FC_TAG_LINK, darg.ino, tag2str[1776] case EXT4_FC_TAG_LINK: ext4_fc_replay_scan[1951] case EXT4_FC_TAG_LINK: ext4_fc_replay[2056] case EXT4_FC_TAG_LINK: Links to this note "
            }
    
        ,
            {
                "id": 11,
                "href": "/posts/writing-music-chords/",
                "title": "Organizing Song chords",
                "section": "posts",
                "date" : "2020.05.01",
                "body": " I often struggled to keep chords for songs I played in a handy place. For a couple of years I have been maintaining chords in a Google Doc. Given the forgetful person that I\u0026#39;m, storing all the chords in one place has come as a blessing. Having all the chords in one place has helped me to be more organized about my music. It has helped me collaborate better with other musicians.\nHowever, using Google Docs for organizing chords has not since scaled as I added more and more songs. Besides, I was maintaining all the chords in one file. Maybe having individual files would have helped the cause but it was nowhere close to what for example UltimateGuitar provides.\nI have since migrated all the chords from the google doc onto my personal website where I write song chords in plain text format (in org-mode files) and using Hugo\u0026#39;s magic shortcodes to detect chords and present them in a way such that it is easy to follow.\nThis has worked wonders for me and this post is meant to give a high level idea of how you can use Hugo shortcodes, to organize and present chords for your songs!\nHugo Short Code for Chords I defined a new short code called chords to define the section of a post where song chords are found. What this shortcodee does is that it recognizes all the chords in its content using the following regular expression:\n[A-G][b#]?((b|maj|add|m|sus|dim|aug)*[0-9]*)*[^\\\\w] Marking Chords in Markdown I defined a new \u0026lt;chords\u0026gt; tag (note that this is not a HTML tag) as a way to indicate that all the content following this tag should be rendered as chords. This is ugly but it works for my usecase. Chords marker makes Liquid templating language use a \u0026lt;pre\u0026gt; with a CSS class for all the content that follows. As you will see in the following section, it\u0026#39;s critical that you use monospace font for rendering this =\u0026lt;pre\u0026gt;=formatted text in order to maintain the mapping of where chords change according to lyrics.\n\u0026lt;chords\u0026gt; I got my first real six-string, Bought it at the five-and-dime The next step is to write chords for the songs. I first place chords just above the lyrics where the chords change and then annotate (and differentiate) chords (from lyrics) by placing them in square brackets. Square brackets encountered after \u0026lt;chords\u0026gt; tag tell Liquid templating language that these are chords and should have a special css style assigned to it.\n\u0026lt;chords\u0026gt; [D A] I got my first real six-string, Bought it at the five-and-dime Song sections (such as chorus, verse, prechorus) in the song use \u0026lt;ctag\u0026gt;\u0026lt;/ctag\u0026gt; tag.\n[D A] Jimmy quit, Joey got married, I shoulda known we\u0026#39;d never get far \u0026lt;ctag\u0026gt;Chorus\u0026lt;/ctag\u0026gt; [Bm A D G] Oh, when I look back now, That summer seemed to last forever Liquid Templating to Render Chords I then have following code in my layout file that renders chords.\nNote: In order to not confuse Liquid Templating used for this post, I have left spaces between {, } and % characters.\n{ % if page.categories contains \u0026#34;chords\u0026#34; % } { % assign var content_split = content | split:\u0026#34;\u0026lt;chords\u0026gt;\u0026#34; % } { { content_split[0] } } \u0026lt;pre class=\u0026#39;highlight\u0026#39;\u0026gt;{ { content_split[1] | replace: \u0026#34;[\u0026#34;, \u0026#34;\u0026lt;span class=\u0026#39;chords\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;]\u0026#34;, \u0026#34;\u0026lt;/span\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;chords\u0026gt;\u0026#34;, \u0026#34;\u0026lt;pre class=\u0026#39;highlight\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;ctag\u0026gt;\u0026#34;, \u0026#34;\u0026lt;span class=\u0026#39;ctag\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;/ctag\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/span\u0026gt;\u0026#34; } }\u0026lt;/pre\u0026gt; { % else % } { { content } } { % endif % } JS Tricks I also have added a few Javascript tricks to implement some interesting functions such as Transpose and Auto-scroll which I first found on UltimateGuitar. These functions come very handy! For those who are interested here\u0026#39;s how the JS code for each look like. Just place these in the appropriate location (right before the { { content_split[0] } } line) in the above template.\nAuto-scroll window.scroll_state = 0; function autoscroll() { if (window.scroll_state == 0) { scroll = setInterval(function() { window.scrollBy(0, 1); console.log(\u0026#39;start\u0026#39;);}, 100); window.scroll_state = 1; } else { window.scroll_state = 0; clearInterval(scroll); console.log(\u0026#39;stop\u0026#39;); } } \u0026lt;button onclick=\u0026#34;autoscroll();\u0026#34;\u0026gt;Autoscroll\u0026lt;/button\u0026gt; Transpose function transpose(direction) { var ele = document.getElementsByClassName(\u0026#39;chords\u0026#39;); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 // C,C#, D,D#, E, F,F#, G,G#, A,A#, B for(var i=0;i\u0026lt;ele.length;i++) { var text = ele[i].textContent; if (direction == 1) { text = text.replace(/C/g, \u0026#34;##\u0026#34;); text = text.replace(/D/g, \u0026#34;####\u0026#34;); text = text.replace(/E/g, \u0026#34;######\u0026#34;); text = text.replace(/F/g, \u0026#34;#######\u0026#34;); text = text.replace(/G/g, \u0026#34;#########\u0026#34;); text = text.replace(/A/g, \u0026#34;###########\u0026#34;); text = text.replace(/B/g, \u0026#34;#\u0026#34;); } else { text = text.replace(/C/g, \u0026#34;############\u0026#34;); text = text.replace(/D/g, \u0026#34;##\u0026#34;); text = text.replace(/E/g, \u0026#34;####\u0026#34;); text = text.replace(/F/g, \u0026#34;#####\u0026#34;); text = text.replace(/G/g, \u0026#34;#######\u0026#34;); text = text.replace(/A/g, \u0026#34;#########\u0026#34;); text = text.replace(/B/g, \u0026#34;###########\u0026#34;); } text = text.replace(/#############/g, \u0026#34;C\u0026#34;); text = text.replace(/############/g, \u0026#34;B\u0026#34;); text = text.replace(/###########/g, \u0026#34;AA\u0026#34;); text = text.replace(/##########/g, \u0026#34;A\u0026#34;); text = text.replace(/#########/g, \u0026#34;GG\u0026#34;); text = text.replace(/########/g, \u0026#34;G\u0026#34;); text = text.replace(/#######/g, \u0026#34;FF\u0026#34;); text = text.replace(/######/g, \u0026#34;F\u0026#34;); text = text.replace(/#####/g, \u0026#34;E\u0026#34;); text = text.replace(/####/g, \u0026#34;DD\u0026#34;); text = text.replace(/###/g, \u0026#34;D\u0026#34;); text = text.replace(/##/g, \u0026#34;CC\u0026#34;); text = text.replace(/#/g, \u0026#34;C\u0026#34;); text = text.replace(/AA/g, \u0026#34;A#\u0026#34;); text = text.replace(/GG/g, \u0026#34;G#\u0026#34;); text = text.replace(/FF/g, \u0026#34;F#\u0026#34;); text = text.replace(/DD/g, \u0026#34;D#\u0026#34;); text = text.replace(/CC/g, \u0026#34;C#\u0026#34;); ele[i].textContent = text; } } \u0026lt;button onclick=\u0026#34;transpose(1);\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;transpose(0);\u0026#34;\u0026gt;-1\u0026lt;/button\u0026gt; Have fun adding chords to your blog!\nLinks to this note "
            }
    
        ,
            {
                "id": 12,
                "href": "/posts/dil-mein-jagi/",
                "title": "dil mein jaagi",
                "section": "posts",
                "date" : "2020.04.28",
                "body": " Dil mein jaagi is a beautiful composition by Amit Trivedi. Check out the original song here. However, it has been highly under noticed. My wife Rithisha (who is an amazing singer() btw) and I decided to give this song a shot. What started as just a jam back in 2016 summer, ended up becoming a full fledged performance. All thanks to Rithisha, Shardul, Rucha and Vaishnavh for their amazing contributions. Special thanks to Google for providing a place to practice and record without which this wouldn\u0026#39;t have been possible. This one of my favorite music covers!\nLinks to this note "
            }
    
        ,
            {
                "id": 13,
                "href": "/posts/rehna-tu/",
                "title": "rehna tu",
                "section": "posts",
                "date" : "2019.05.06",
                "body": " Rehna Tu is originally a song from movie Delhi 6. We interpreted it very differently and here\u0026#39;s our take on it. AR Rahman\u0026#39;s music is just amazing!\nLinks to this note "
            }
    
        ,
            {
                "id": 14,
                "href": "/posts/yaava-mohana/",
                "title": "yaava  mohana",
                "section": "posts",
                "date" : "2019.05.06",
                "body": " This is a really beautiful Kannada composition! I fell in love with it the first time I heard it. Do listen :) (music)\nLinks to this note "
            }
    
        ,
            {
                "id": 15,
                "href": "/about/",
                "title": "::about",
                "section": "",
                "date" : "0001.01.01",
                "body": " Harshad Shirwadkar Hi! I\u0026#39;m Harshad. I live in the beautiful city of Seattle and work for Google. As a part of my work and as a hobby, I contribute to the development of upstream Linux kernel. Here are the patches that I have contributed to the Linux Kernel. I also like to play piano. Please check my music page for my collaborations with other musicians.\nPublications FastCommit: resource-efficient, performant and cost-effective file system journaling ATC 2024 (Awarded Best Paper)\nHarshad Shirwadkar, Saurabh Kadekodi, Theodore Ts\u0026#39;o\nWineFS: a hugepage-aware file system for persistent memory that ages gracefully SOSP 2021\nRohan Kadekodi, Saurabh Kadekodi, Soujanya Ponnapalli, Harshad Shirwadkar, Gregory R. Ganger, Aasheesh Kolli, Vijay Chidambaram\n"
            }
    
        ,
            {
                "id": 16,
                "href": "/about2/",
                "title": "about",
                "section": "",
                "date" : "0001.01.01",
                "body": " Harshad Shirwadkar Seattle, WA Hi! I'm Harshad. I live in the beautiful city of Seattle and work for Google. As a part of my work and as a hobby, I contribute to the development of upstream Linux kernel. Here are the patches that I have contributed to the Linux Kernel. I also like to play piano. Please check my music page for my collaborations with other musicians. Projects Ext4 Fast Commits Google 2019 - 2020 Worked on adding a new journalling scheme for Ext4 file system that improves Ext4 performance in data=ordered mode. These patches are merged into upstream linux kernel.\nExt4 Freespace Trees Google Summer 2020 Mentored an intern and later enhanced their work to add a free space tree based allocator for Ext4 file system. The patches are in review.\nThe Web in the Face of Future Internet Architectures Carnegie Mellon University 2015-2016 Improving HTTP/HTTPS by leveraging Content Addressability of eXpressive Internet Architecture(XIA), an inter- net architecture proposed by CMU to natively support Evolvability and Information Centric Networking principles. Also designed and implemented caching service, reliable transport and content distribution for XIA Network Stack.\nPebblesOS - a UNIX like operating system Carnegie Mellon University 2015 As a part of Operating Systems Course (15-415) at CMU, wrote a unix-like operating system from scratch. PebblesOS boots in VirtualBox and has a default shell implemented. Code can be made available upon request.\nNext4 - Snapshots support for Ext4 file system Pune Institute of Computer Technology 2010 - 2011 Designed and implemented Read-only Snapshots for Ext4 file system. (paper)\nExperience Google Senior Software Engineer 2016 - Present I am a part of Google\u0026rsquo;s storage team responsible for developing low level software including file systems, block layer features for Google\u0026rsquo;s production servers and GCP.\nCarnegie Mellon University Graduate Student Researcher 2015 - 2016 Worked with eXpressive Internet Architecture team at CMU on various Network and Transport layer issues in XIA Network Stack.\nAirTight Networks Senior Software Engineer 2011 - 2014 Worked on various driver level and application level features for Wi-Fi access points and WIPS (Wireless Intrusion Prevention Systems)\nContent Analytics - In driver connection tracker and HTTP/HTTPS parser ARP spoofer - Driver level ARP spoofer for WIPS Wireless Event Handler - Designed and implemented a inter-module communication framework based on UNIX sockets for AirTight AP Bandwidth Control - Designed and implemented bandwidth control feature for AirTight AP Debugged critical field issues in Wi-Fi driver and host ap daemon. Google Summer of Code Student Software Developer 2011 Designed and implemented Snapshot revert feature for Next4 file system.\nEducation Carnegie Mellon University Master's in Information Networking 2014-2016 Courses: OS Design and Implementation (15-415), Computer Networking (15-551), Probability and Computing (15-359), Storage Systems (18-746) Pune University of Computer Technology Bachelor's in Computer Engineering 2011-2014 "
            }
    
        ,
            {
                "id": 17,
                "href": "/contact/",
                "title": "Contact Me",
                "section": "",
                "date" : "0001.01.01",
                "body": " "
            }
    
        ,
            {
                "id": 18,
                "href": "/posts/generate_digital_garden/",
                "title": "Digital Garden Graph Generator",
                "section": "posts",
                "date" : "0001.01.01",
                "body": " This note contains generates the graph that you see on graph page. The script requires 2 variables to be set correctly:\nroam_notes_dir: This is the location of org roam notes. graph_dir: Location where the hugo post containing output graph would be stored. roam_notes_dir=\u0026#34;/home/harshads/base/sites/digital_garden/posts\u0026#34; graph_dir=\u0026#34;/home/harshads/base/sites/digital_garden\u0026#34; Some Getter Functions These functions return ID and URL from the filename. All the notes are assumed to have ID in first 3 lines (that is how org roam works).\ndef get_id(path): with open(path) as f: lines = f.readlines() for line in lines: return line.split(\u0026#34;:\u0026#34;)[2].strip() def get_url(path): return os.path.splitext(os.path.basename(path))[0] Setting up dictorionaries Next, we will set up a few dictionaries for generating graphs:\nid_to_url: This dictionary maps org roam ID to URL in the website id_incoming_links: This dictionary stores all the incoming links to a given note. import os import re id_to_url = {} id_incoming_links = {} for filename in os.scandir(roam_notes_dir): if not filename.is_file(): continue if not filename.path.endswith(\u0026#34;.org\u0026#34;): continue current_id = get_id(filename.path) id_to_url[current_id] = get_url(filename.path) id_incoming_links[current_id] = [] for filename in os.scandir(roam_notes_dir): if not filename.is_file(): continue if not filename.path.endswith(\u0026#34;.org\u0026#34;): continue regex = re.compile(\u0026#34;\\[id:([A-Za-z0-9]+(-[A-Za-z0-9]+)+)\\]\u0026#34;) current_id = get_id(filename.path) with open(filename.path) as f: content = f.read() refs = re.findall(regex, content) for ref in refs: print(ref[0]) if ref[0] in id_incoming_links: id_incoming_links[ref[0]].append(current_id) Build Nodes and Edges Now that we have dictionaries, time to represent the graph in a way that our eventual vis.js script is going to like.\nnodes = set() edges = set() node_link_count = {} max_links = 0 for id in id_to_urhttp:// nodes.add(id_to_url[id]) node_link_count[id_to_url[id]] = len(id_incoming_links[id]) max_links = max(max_links, len(id_incoming_links[id])) for id in id_incoming_links: for link in id_incoming_links[id]: edge = (id_to_url[id], id_to_url[link]) edges.add(edge) print(nodes) print(edges) if max_links \u0026gt; 0: for node in node_link_count: node_link_count[node] = node_link_count[node] * 5 / max_links Elements of graph.org Alright, now we have all the stuff necessary to create the final graph file. Okay some bits about the final graph.org file. The final graph.org file is still an org-mode file. It however contains raw html and javascript code that is responsible for producing graph. Here\u0026#39;s how th vis.js script looks like:\nvis_js_script_start\n\u0026lt;!-- In the following URLs you may want to replace @latest by @version to prevent unexpected potentionally breaking updates. For example vis-data@1.0.0 instead of vis-data@latest. --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/vis-data@latest/peer/umd/vis-data.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/vis-network@latest/peer/umd/vis-network.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://unpkg.com/vis-network/styles/vis-network.min.css\u0026#34; /\u0026gt; \u0026lt;!-- You may include other packages like Vis Timeline or Vis Graph3D here. --\u0026gt; \u0026lt;style\u0026gt; body { color: #d3d3d3; } #mynetwork { height: 800px; border: 1px solid #444444; background-color: #242730; } \u0026lt;/style\u0026gt; \u0026lt;div id=\u0026#34;mynetwork\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; Sample dataset.\nvar nodes = new vis.DataSet([ { id: 1, labehttp:// \u0026#34;google\u0026#34;, urhttp:// \u0026#34;www.google.com\u0026#34;, color: \u0026#34;#ff665c\u0026#34; }, { id: 2, labehttp:// \u0026#34;Node 2\u0026#34; }, { id: 3, labehttp:// \u0026#34;Node 3\u0026#34; }, { id: 4, labehttp:// \u0026#34;Node 4\u0026#34; }, { id: 5, labehttp:// \u0026#34;Node 5\u0026#34; } ]); // create an array with edges var edges = new vis.DataSet([ { from: \u0026#34;str1\u0026#34;, to: 3 }, { from: \u0026#34;str1\u0026#34;, to: 2 }, { from: 2, to: 4 }, { from: 2, to: 5 }, { from: 3, to: 3 } ]); vis_js_script_end\n// create a network var container = document.getElementById(\u0026#34;mynetwork\u0026#34;); var data = { nodes: nodes, edges: edges }; var options = { physics: false, nodes: { shape: \u0026#34;dot\u0026#34;, size: 13, font: { size: 15, color: \u0026#34;white\u0026#34;, }, borderWidth: 0, }, edges: { color: \u0026#34;#62686E\u0026#34;, width: 2, }, } var network = new vis.Network(container, data, options); network.on(\u0026#34;selectNode\u0026#34;, function (params) { var node = nodes.get(params.nodes[0]); window.open(node.url, \u0026#39;_blank\u0026#39;); }); \u0026lt;/script\u0026gt; Finally generate the graph.org file emacs org-mode\u0026#39;s babel module enables literate programming. It supports noweb syntax as well. And quite wonderfully, it allows me to reuse sample examples that I shared in the previous section to actually generate the final graph.org file. import random colors = [ \u0026#34;#ff665c\u0026#34;, \u0026#34;#5CEFFF\u0026#34;, \u0026#34;#A991F1\u0026#34;, \u0026#34;#FCCE7B\u0026#34; ] with open(graph_dir + \u0026#34;/graph.org\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;\u0026#34;\u0026#34; #+title: Graph \u0026#34;\u0026#34;\u0026#34;) f.write(\u0026#34;{{\u0026#34; + \u0026#34;\u0026lt; rawhtml \u0026gt;\u0026#34; + \u0026#34;}}\u0026#34;) f.write(\u0026#34;\u0026#34;\u0026#34; \u0026lt;\u0026lt;vis_js_script_start\u0026gt;\u0026gt; \u0026#34;\u0026#34;\u0026#34;) f.write(\u0026#34;var nodes = new vis.DataSet([\u0026#34;) for node in nodes: f.write(f\u0026#34;\u0026#34;\u0026#34;{{ id: \\\u0026#34;{node}\\\u0026#34;, labehttp:// \\\u0026#34;{node}\\\u0026#34;, urhttp:// \\\u0026#34;/posts/{node}/\\\u0026#34;, color: \\\u0026#34;{random.choice(colors)}\\\u0026#34;, value: \\\u0026#34;{node_link_count[node]}\\\u0026#34;, }},\\n\u0026#34;\u0026#34;\u0026#34;) f.write(\u0026#34;\u0026#34;\u0026#34;].map((node, index, arr) =\u0026gt; { const angle = 2 * Math.PI * (index / arr.length + 0.75); node.x = 300 * Math.cos(angle); node.y = 300 * Math.sin(angle); return node; })); \u0026#34;\u0026#34;\u0026#34;) f.write(\u0026#34;var edges = [\u0026#34;) for edge in edges: f.write(f\u0026#34;{{ from: \\\u0026#34;{edge[0]}\\\u0026#34;, to: \\\u0026#34;{edge[1]}\\\u0026#34; }},\\n\u0026#34;) f.write(\u0026#34;\u0026#34;\u0026#34;]; \u0026lt;\u0026lt;vis_js_script_end\u0026gt;\u0026gt; \u0026#34;\u0026#34;\u0026#34;) f.write(\u0026#34;{{\u0026#34; + \u0026#34;\u0026lt; /rawhtml \u0026gt;\u0026#34; + \u0026#34;}}\u0026#34;) Links to this note "
            }
    
        ,
            {
                "id": 19,
                "href": "/graph/",
                "title": "Graph",
                "section": "",
                "date" : "0001.01.01",
                "body": " "
            }
    
]
